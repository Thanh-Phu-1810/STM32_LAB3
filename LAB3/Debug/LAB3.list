
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002cc4  08002cc4  00012cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ce8  08002ce8  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002ce8  08002ce8  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ce8  08002ce8  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ce8  08002ce8  00012ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cec  08002cec  00012cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000058  08002d48  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002d48  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b77  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd9  00000000  00000000  00029bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016efc  00000000  00000000  0002cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2a1  00000000  00000000  00043af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082736  00000000  00000000  0004fd95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d24cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002954  00000000  00000000  000d2520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cac 	.word	0x08002cac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002cac 	.word	0x08002cac

0800014c <isButtonPressed1>:

int timer_counter_button1;
int timer_counter_button2;
int timer_counter_button3;
int isButtonPressed1()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButtonPressed1+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButtonPressed1+0x16>
	{
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButtonPressed1+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButtonPressed1+0x18>
	}
    return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000074 	.word	0x20000074

08000170 <isButtonPressed2>:
int isButtonPressed2()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButtonPressed2+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButtonPressed2+0x16>
	{
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButtonPressed2+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButtonPressed2+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000078 	.word	0x20000078

08000194 <isButtonPressed3>:
int isButtonPressed3()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButtonPressed3+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButtonPressed3+0x16>
	{
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButtonPressed3+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButtonPressed3+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000007c 	.word	0x2000007c

080001b8 <subKeyProcess1>:
void subKeyProcess1()
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	button1_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyProcess1+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000074 	.word	0x20000074

080001d0 <subKeyProcess2>:
void subKeyProcess2()
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	button2_flag = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcess2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000078 	.word	0x20000078

080001e8 <subKeyProcess3>:
void subKeyProcess3()
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button3_flag = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000007c 	.word	0x2000007c

08000200 <getKeyInput>:
void getKeyInput() //Tối ưu code chổ này sao cho thành một máy trạng thái trong đây là dùng một cái mảng để lưu các giá trị KeyReg và không dùng for để gọi hàm HAL_GPIO_ReadPin
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//Button1
	KeyReg0_Button1= KeyReg1_Button1;
 8000204:	4b66      	ldr	r3, [pc, #408]	; (80003a0 <getKeyInput+0x1a0>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a66      	ldr	r2, [pc, #408]	; (80003a4 <getKeyInput+0x1a4>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg1_Button1 = KeyReg2_Button1;
 800020c:	4b66      	ldr	r3, [pc, #408]	; (80003a8 <getKeyInput+0x1a8>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a63      	ldr	r2, [pc, #396]	; (80003a0 <getKeyInput+0x1a0>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg2_Button1 = HAL_GPIO_ReadPin(GPIOA, Button1_Pin);
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	4864      	ldr	r0, [pc, #400]	; (80003ac <getKeyInput+0x1ac>)
 800021a:	f001 fd1b 	bl	8001c54 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b61      	ldr	r3, [pc, #388]	; (80003a8 <getKeyInput+0x1a8>)
 8000224:	601a      	str	r2, [r3, #0]
	if((KeyReg0_Button1== KeyReg1_Button1) && (KeyReg1_Button1 == KeyReg2_Button1))
 8000226:	4b5f      	ldr	r3, [pc, #380]	; (80003a4 <getKeyInput+0x1a4>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b5d      	ldr	r3, [pc, #372]	; (80003a0 <getKeyInput+0x1a0>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d12c      	bne.n	800028c <getKeyInput+0x8c>
 8000232:	4b5b      	ldr	r3, [pc, #364]	; (80003a0 <getKeyInput+0x1a0>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b5c      	ldr	r3, [pc, #368]	; (80003a8 <getKeyInput+0x1a8>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d126      	bne.n	800028c <getKeyInput+0x8c>
	{
		if(KeyReg3_Button1 != KeyReg2_Button1)
 800023e:	4b5c      	ldr	r3, [pc, #368]	; (80003b0 <getKeyInput+0x1b0>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b59      	ldr	r3, [pc, #356]	; (80003a8 <getKeyInput+0x1a8>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00e      	beq.n	8000268 <getKeyInput+0x68>
		{
			KeyReg3_Button1 = KeyReg2_Button1;
 800024a:	4b57      	ldr	r3, [pc, #348]	; (80003a8 <getKeyInput+0x1a8>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a58      	ldr	r2, [pc, #352]	; (80003b0 <getKeyInput+0x1b0>)
 8000250:	6013      	str	r3, [r2, #0]
			if(KeyReg2_Button1 == PRESSED_STATE)
 8000252:	4b55      	ldr	r3, [pc, #340]	; (80003a8 <getKeyInput+0x1a8>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d118      	bne.n	800028c <getKeyInput+0x8c>
			{
				subKeyProcess1();
 800025a:	f7ff ffad 	bl	80001b8 <subKeyProcess1>
				timer_counter_button1 = 2000;
 800025e:	4b55      	ldr	r3, [pc, #340]	; (80003b4 <getKeyInput+0x1b4>)
 8000260:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	e011      	b.n	800028c <getKeyInput+0x8c>
			}
		}
		else
		{
			timer_counter_button1--;
 8000268:	4b52      	ldr	r3, [pc, #328]	; (80003b4 <getKeyInput+0x1b4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	3b01      	subs	r3, #1
 800026e:	4a51      	ldr	r2, [pc, #324]	; (80003b4 <getKeyInput+0x1b4>)
 8000270:	6013      	str	r3, [r2, #0]
			if(timer_counter_button1 <= 0)
 8000272:	4b50      	ldr	r3, [pc, #320]	; (80003b4 <getKeyInput+0x1b4>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	dc08      	bgt.n	800028c <getKeyInput+0x8c>
			{
				if(KeyReg2_Button1 == PRESSED_STATE)
 800027a:	4b4b      	ldr	r3, [pc, #300]	; (80003a8 <getKeyInput+0x1a8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d101      	bne.n	8000286 <getKeyInput+0x86>
                subKeyProcess1();
 8000282:	f7ff ff99 	bl	80001b8 <subKeyProcess1>
				timer_counter_button1 = 50;
 8000286:	4b4b      	ldr	r3, [pc, #300]	; (80003b4 <getKeyInput+0x1b4>)
 8000288:	2232      	movs	r2, #50	; 0x32
 800028a:	601a      	str	r2, [r3, #0]
			}
		}
	}

	//Button2
	KeyReg0_Button2= KeyReg1_Button2;
 800028c:	4b4a      	ldr	r3, [pc, #296]	; (80003b8 <getKeyInput+0x1b8>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a4a      	ldr	r2, [pc, #296]	; (80003bc <getKeyInput+0x1bc>)
 8000292:	6013      	str	r3, [r2, #0]
	KeyReg1_Button2 = KeyReg2_Button2;
 8000294:	4b4a      	ldr	r3, [pc, #296]	; (80003c0 <getKeyInput+0x1c0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a47      	ldr	r2, [pc, #284]	; (80003b8 <getKeyInput+0x1b8>)
 800029a:	6013      	str	r3, [r2, #0]
	KeyReg2_Button2 = HAL_GPIO_ReadPin(GPIOA, Button2_Pin);
 800029c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002a0:	4842      	ldr	r0, [pc, #264]	; (80003ac <getKeyInput+0x1ac>)
 80002a2:	f001 fcd7 	bl	8001c54 <HAL_GPIO_ReadPin>
 80002a6:	4603      	mov	r3, r0
 80002a8:	461a      	mov	r2, r3
 80002aa:	4b45      	ldr	r3, [pc, #276]	; (80003c0 <getKeyInput+0x1c0>)
 80002ac:	601a      	str	r2, [r3, #0]
	if((KeyReg0_Button2 == KeyReg1_Button2) && (KeyReg1_Button2 == KeyReg2_Button2))
 80002ae:	4b43      	ldr	r3, [pc, #268]	; (80003bc <getKeyInput+0x1bc>)
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	4b41      	ldr	r3, [pc, #260]	; (80003b8 <getKeyInput+0x1b8>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d12c      	bne.n	8000314 <getKeyInput+0x114>
 80002ba:	4b3f      	ldr	r3, [pc, #252]	; (80003b8 <getKeyInput+0x1b8>)
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	4b40      	ldr	r3, [pc, #256]	; (80003c0 <getKeyInput+0x1c0>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d126      	bne.n	8000314 <getKeyInput+0x114>
	{
		if(KeyReg3_Button2 != KeyReg2_Button2)
 80002c6:	4b3f      	ldr	r3, [pc, #252]	; (80003c4 <getKeyInput+0x1c4>)
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	4b3d      	ldr	r3, [pc, #244]	; (80003c0 <getKeyInput+0x1c0>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d00e      	beq.n	80002f0 <getKeyInput+0xf0>
		{
			KeyReg3_Button2 = KeyReg2_Button2;
 80002d2:	4b3b      	ldr	r3, [pc, #236]	; (80003c0 <getKeyInput+0x1c0>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a3b      	ldr	r2, [pc, #236]	; (80003c4 <getKeyInput+0x1c4>)
 80002d8:	6013      	str	r3, [r2, #0]
			if(KeyReg2_Button2 == PRESSED_STATE)
 80002da:	4b39      	ldr	r3, [pc, #228]	; (80003c0 <getKeyInput+0x1c0>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d118      	bne.n	8000314 <getKeyInput+0x114>
			{
				subKeyProcess2();
 80002e2:	f7ff ff75 	bl	80001d0 <subKeyProcess2>
				timer_counter_button2 = 2000;
 80002e6:	4b38      	ldr	r3, [pc, #224]	; (80003c8 <getKeyInput+0x1c8>)
 80002e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	e011      	b.n	8000314 <getKeyInput+0x114>
			}
		}
		else
		{
			timer_counter_button2--;
 80002f0:	4b35      	ldr	r3, [pc, #212]	; (80003c8 <getKeyInput+0x1c8>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	3b01      	subs	r3, #1
 80002f6:	4a34      	ldr	r2, [pc, #208]	; (80003c8 <getKeyInput+0x1c8>)
 80002f8:	6013      	str	r3, [r2, #0]
			if(timer_counter_button2 <= 0)
 80002fa:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <getKeyInput+0x1c8>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	dc08      	bgt.n	8000314 <getKeyInput+0x114>
			{
				if(KeyReg2_Button2 == PRESSED_STATE)
 8000302:	4b2f      	ldr	r3, [pc, #188]	; (80003c0 <getKeyInput+0x1c0>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d101      	bne.n	800030e <getKeyInput+0x10e>
				subKeyProcess2();
 800030a:	f7ff ff61 	bl	80001d0 <subKeyProcess2>
				timer_counter_button2 = 50;
 800030e:	4b2e      	ldr	r3, [pc, #184]	; (80003c8 <getKeyInput+0x1c8>)
 8000310:	2232      	movs	r2, #50	; 0x32
 8000312:	601a      	str	r2, [r3, #0]
			}
		}
	}

	//Button3
	KeyReg0_Button3 = KeyReg1_Button3;
 8000314:	4b2d      	ldr	r3, [pc, #180]	; (80003cc <getKeyInput+0x1cc>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a2d      	ldr	r2, [pc, #180]	; (80003d0 <getKeyInput+0x1d0>)
 800031a:	6013      	str	r3, [r2, #0]
	KeyReg1_Button3 = KeyReg2_Button3;
 800031c:	4b2d      	ldr	r3, [pc, #180]	; (80003d4 <getKeyInput+0x1d4>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a2a      	ldr	r2, [pc, #168]	; (80003cc <getKeyInput+0x1cc>)
 8000322:	6013      	str	r3, [r2, #0]
	KeyReg2_Button3 = HAL_GPIO_ReadPin(GPIOA, Button3_Pin);
 8000324:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000328:	4820      	ldr	r0, [pc, #128]	; (80003ac <getKeyInput+0x1ac>)
 800032a:	f001 fc93 	bl	8001c54 <HAL_GPIO_ReadPin>
 800032e:	4603      	mov	r3, r0
 8000330:	461a      	mov	r2, r3
 8000332:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <getKeyInput+0x1d4>)
 8000334:	601a      	str	r2, [r3, #0]
	if((KeyReg0_Button3 == KeyReg1_Button3) && (KeyReg1_Button3 == KeyReg2_Button3))
 8000336:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <getKeyInput+0x1d0>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	4b24      	ldr	r3, [pc, #144]	; (80003cc <getKeyInput+0x1cc>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	429a      	cmp	r2, r3
 8000340:	d12c      	bne.n	800039c <getKeyInput+0x19c>
 8000342:	4b22      	ldr	r3, [pc, #136]	; (80003cc <getKeyInput+0x1cc>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <getKeyInput+0x1d4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	429a      	cmp	r2, r3
 800034c:	d126      	bne.n	800039c <getKeyInput+0x19c>
	{
		if(KeyReg3_Button3 != KeyReg2_Button3)
 800034e:	4b22      	ldr	r3, [pc, #136]	; (80003d8 <getKeyInput+0x1d8>)
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	4b20      	ldr	r3, [pc, #128]	; (80003d4 <getKeyInput+0x1d4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	429a      	cmp	r2, r3
 8000358:	d00e      	beq.n	8000378 <getKeyInput+0x178>
		{
			KeyReg3_Button3 = KeyReg2_Button3;
 800035a:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <getKeyInput+0x1d4>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a1e      	ldr	r2, [pc, #120]	; (80003d8 <getKeyInput+0x1d8>)
 8000360:	6013      	str	r3, [r2, #0]
			if(KeyReg2_Button3 == PRESSED_STATE)
 8000362:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <getKeyInput+0x1d4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d118      	bne.n	800039c <getKeyInput+0x19c>
			{
				subKeyProcess3();
 800036a:	f7ff ff3d 	bl	80001e8 <subKeyProcess3>
				timer_counter_button3 = 2000;
 800036e:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <getKeyInput+0x1dc>)
 8000370:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000374:	601a      	str	r2, [r3, #0]
				subKeyProcess3();
				timer_counter_button3 = 50;
			}
		}
	}
}
 8000376:	e011      	b.n	800039c <getKeyInput+0x19c>
			timer_counter_button3--;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <getKeyInput+0x1dc>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	3b01      	subs	r3, #1
 800037e:	4a17      	ldr	r2, [pc, #92]	; (80003dc <getKeyInput+0x1dc>)
 8000380:	6013      	str	r3, [r2, #0]
			if(timer_counter_button3 <= 0)
 8000382:	4b16      	ldr	r3, [pc, #88]	; (80003dc <getKeyInput+0x1dc>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	dc08      	bgt.n	800039c <getKeyInput+0x19c>
				if(KeyReg2_Button3 == PRESSED_STATE)
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <getKeyInput+0x1d4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d101      	bne.n	8000396 <getKeyInput+0x196>
				subKeyProcess3();
 8000392:	f7ff ff29 	bl	80001e8 <subKeyProcess3>
				timer_counter_button3 = 50;
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <getKeyInput+0x1dc>)
 8000398:	2232      	movs	r2, #50	; 0x32
 800039a:	601a      	str	r2, [r3, #0]
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20000004 	.word	0x20000004
 80003a4:	20000000 	.word	0x20000000
 80003a8:	20000008 	.word	0x20000008
 80003ac:	40010800 	.word	0x40010800
 80003b0:	2000000c 	.word	0x2000000c
 80003b4:	200000bc 	.word	0x200000bc
 80003b8:	20000014 	.word	0x20000014
 80003bc:	20000010 	.word	0x20000010
 80003c0:	20000018 	.word	0x20000018
 80003c4:	2000001c 	.word	0x2000001c
 80003c8:	200000c0 	.word	0x200000c0
 80003cc:	20000024 	.word	0x20000024
 80003d0:	20000020 	.word	0x20000020
 80003d4:	20000028 	.word	0x20000028
 80003d8:	2000002c 	.word	0x2000002c
 80003dc:	200000b8 	.word	0x200000b8

080003e0 <fsm_automatic_run>:

int led7_seg[3] = {5, 2, 3}; //5s là đỏ, 2s là vàng, 3s là xanh
int led_blinky = 0;

void fsm_automatic_run()
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	switch(status)
 80003e4:	4b8a      	ldr	r3, [pc, #552]	; (8000610 <fsm_automatic_run+0x230>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	2b04      	cmp	r3, #4
 80003ec:	f200 8105 	bhi.w	80005fa <fsm_automatic_run+0x21a>
 80003f0:	a201      	add	r2, pc, #4	; (adr r2, 80003f8 <fsm_automatic_run+0x18>)
 80003f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f6:	bf00      	nop
 80003f8:	0800040d 	.word	0x0800040d
 80003fc:	08000439 	.word	0x08000439
 8000400:	080004a9 	.word	0x080004a9
 8000404:	0800051d 	.word	0x0800051d
 8000408:	08000589 	.word	0x08000589
	{
		case INIT:
			HAL_GPIO_WritePin(GPIOA, LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin | LED_5_Pin | LED_6_Pin, RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	217e      	movs	r1, #126	; 0x7e
 8000410:	4880      	ldr	r0, [pc, #512]	; (8000614 <fsm_automatic_run+0x234>)
 8000412:	f001 fc36 	bl	8001c82 <HAL_GPIO_WritePin>
			status = AUTO_RED_GREEN;
 8000416:	4b7e      	ldr	r3, [pc, #504]	; (8000610 <fsm_automatic_run+0x230>)
 8000418:	2202      	movs	r2, #2
 800041a:	601a      	str	r2, [r3, #0]
			setTimer(1000);
 800041c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000420:	f000 ff3c 	bl	800129c <setTimer>
			setTimer1(250);
 8000424:	20fa      	movs	r0, #250	; 0xfa
 8000426:	f000 ff53 	bl	80012d0 <setTimer1>
			isButtonPressed1();
 800042a:	f7ff fe8f 	bl	800014c <isButtonPressed1>
			isButtonPressed2();
 800042e:	f7ff fe9f 	bl	8000170 <isButtonPressed2>
			isButtonPressed3();
 8000432:	f7ff feaf 	bl	8000194 <isButtonPressed3>
			break;
 8000436:	e0e9      	b.n	800060c <fsm_automatic_run+0x22c>
		case AUTO_RED_GREEN:
			led_red_and_green();
 8000438:	f001 f8bc 	bl	80015b4 <led_red_and_green>
			if(isButtonPressed1() == 1) // chuyển sang manual
 800043c:	f7ff fe86 	bl	800014c <isButtonPressed1>
 8000440:	4603      	mov	r3, r0
 8000442:	2b01      	cmp	r3, #1
 8000444:	d108      	bne.n	8000458 <fsm_automatic_run+0x78>
			{
				status = NORMAL_MODE;
 8000446:	4b72      	ldr	r3, [pc, #456]	; (8000610 <fsm_automatic_run+0x230>)
 8000448:	220c      	movs	r2, #12
 800044a:	601a      	str	r2, [r3, #0]
				clearAllLed();
 800044c:	f000 fa8a 	bl	8000964 <clearAllLed>
				setTimer2(10000);
 8000450:	f242 7010 	movw	r0, #10000	; 0x2710
 8000454:	f000 ff56 	bl	8001304 <setTimer2>
			}
			if(timer1_flag == 1)
 8000458:	4b6f      	ldr	r3, [pc, #444]	; (8000618 <fsm_automatic_run+0x238>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d104      	bne.n	800046a <fsm_automatic_run+0x8a>
			{
				display7SEG_AUTO();
 8000460:	f000 f8e0 	bl	8000624 <display7SEG_AUTO>
				setTimer1(250);
 8000464:	20fa      	movs	r0, #250	; 0xfa
 8000466:	f000 ff33 	bl	80012d0 <setTimer1>
			}

            if(timer_flag == 1)
 800046a:	4b6c      	ldr	r3, [pc, #432]	; (800061c <fsm_automatic_run+0x23c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b01      	cmp	r3, #1
 8000470:	f040 80c5 	bne.w	80005fe <fsm_automatic_run+0x21e>
			{
				led7_seg[0]--;
 8000474:	4b6a      	ldr	r3, [pc, #424]	; (8000620 <fsm_automatic_run+0x240>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	3b01      	subs	r3, #1
 800047a:	4a69      	ldr	r2, [pc, #420]	; (8000620 <fsm_automatic_run+0x240>)
 800047c:	6013      	str	r3, [r2, #0]
				led7_seg[2]--;
 800047e:	4b68      	ldr	r3, [pc, #416]	; (8000620 <fsm_automatic_run+0x240>)
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	3b01      	subs	r3, #1
 8000484:	4a66      	ldr	r2, [pc, #408]	; (8000620 <fsm_automatic_run+0x240>)
 8000486:	6093      	str	r3, [r2, #8]
				setTimer(1000);
 8000488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800048c:	f000 ff06 	bl	800129c <setTimer>
				if(led7_seg[2] == 0)
 8000490:	4b63      	ldr	r3, [pc, #396]	; (8000620 <fsm_automatic_run+0x240>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	2b00      	cmp	r3, #0
 8000496:	f040 80b2 	bne.w	80005fe <fsm_automatic_run+0x21e>
				{
					status = AUTO_RED_YELLOW;
 800049a:	4b5d      	ldr	r3, [pc, #372]	; (8000610 <fsm_automatic_run+0x230>)
 800049c:	2203      	movs	r2, #3
 800049e:	601a      	str	r2, [r3, #0]
					led7_seg[2] = 3;
 80004a0:	4b5f      	ldr	r3, [pc, #380]	; (8000620 <fsm_automatic_run+0x240>)
 80004a2:	2203      	movs	r2, #3
 80004a4:	609a      	str	r2, [r3, #8]
				}
			}
			break;
 80004a6:	e0aa      	b.n	80005fe <fsm_automatic_run+0x21e>
		case AUTO_RED_YELLOW:
			led_red_and_yellow();
 80004a8:	f001 f894 	bl	80015d4 <led_red_and_yellow>
			if(isButtonPressed1() == 1) // chuyển sang manual
 80004ac:	f7ff fe4e 	bl	800014c <isButtonPressed1>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d108      	bne.n	80004c8 <fsm_automatic_run+0xe8>
			{
				status = NORMAL_MODE;
 80004b6:	4b56      	ldr	r3, [pc, #344]	; (8000610 <fsm_automatic_run+0x230>)
 80004b8:	220c      	movs	r2, #12
 80004ba:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80004bc:	f000 fa52 	bl	8000964 <clearAllLed>
				setTimer2(10000);
 80004c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80004c4:	f000 ff1e 	bl	8001304 <setTimer2>
			}
			if(timer1_flag == 1)
 80004c8:	4b53      	ldr	r3, [pc, #332]	; (8000618 <fsm_automatic_run+0x238>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d104      	bne.n	80004da <fsm_automatic_run+0xfa>
			{
				display7SEG_AUTO();
 80004d0:	f000 f8a8 	bl	8000624 <display7SEG_AUTO>
				setTimer1(250);
 80004d4:	20fa      	movs	r0, #250	; 0xfa
 80004d6:	f000 fefb 	bl	80012d0 <setTimer1>
			}
			if(timer_flag == 1)
 80004da:	4b50      	ldr	r3, [pc, #320]	; (800061c <fsm_automatic_run+0x23c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	f040 808f 	bne.w	8000602 <fsm_automatic_run+0x222>
			{
				led7_seg[0]--;
 80004e4:	4b4e      	ldr	r3, [pc, #312]	; (8000620 <fsm_automatic_run+0x240>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	3b01      	subs	r3, #1
 80004ea:	4a4d      	ldr	r2, [pc, #308]	; (8000620 <fsm_automatic_run+0x240>)
 80004ec:	6013      	str	r3, [r2, #0]
				led7_seg[1]--;
 80004ee:	4b4c      	ldr	r3, [pc, #304]	; (8000620 <fsm_automatic_run+0x240>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	3b01      	subs	r3, #1
 80004f4:	4a4a      	ldr	r2, [pc, #296]	; (8000620 <fsm_automatic_run+0x240>)
 80004f6:	6053      	str	r3, [r2, #4]
				setTimer(1000);
 80004f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fc:	f000 fece 	bl	800129c <setTimer>
				if(led7_seg[0] == 0)
 8000500:	4b47      	ldr	r3, [pc, #284]	; (8000620 <fsm_automatic_run+0x240>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d17c      	bne.n	8000602 <fsm_automatic_run+0x222>
				{
					status = AUTO_GREEN_RED;
 8000508:	4b41      	ldr	r3, [pc, #260]	; (8000610 <fsm_automatic_run+0x230>)
 800050a:	2204      	movs	r2, #4
 800050c:	601a      	str	r2, [r3, #0]
					led7_seg[0] = 5;
 800050e:	4b44      	ldr	r3, [pc, #272]	; (8000620 <fsm_automatic_run+0x240>)
 8000510:	2205      	movs	r2, #5
 8000512:	601a      	str	r2, [r3, #0]
					led7_seg[1] = 2;
 8000514:	4b42      	ldr	r3, [pc, #264]	; (8000620 <fsm_automatic_run+0x240>)
 8000516:	2202      	movs	r2, #2
 8000518:	605a      	str	r2, [r3, #4]
				}

			}
			break;
 800051a:	e072      	b.n	8000602 <fsm_automatic_run+0x222>
		case AUTO_GREEN_RED:
			led_green_and_red();
 800051c:	f001 f86a 	bl	80015f4 <led_green_and_red>
			if(isButtonPressed1() == 1) // chuyển sang manual
 8000520:	f7ff fe14 	bl	800014c <isButtonPressed1>
 8000524:	4603      	mov	r3, r0
 8000526:	2b01      	cmp	r3, #1
 8000528:	d108      	bne.n	800053c <fsm_automatic_run+0x15c>
			{
				status = NORMAL_MODE;
 800052a:	4b39      	ldr	r3, [pc, #228]	; (8000610 <fsm_automatic_run+0x230>)
 800052c:	220c      	movs	r2, #12
 800052e:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000530:	f000 fa18 	bl	8000964 <clearAllLed>
				setTimer2(10000);
 8000534:	f242 7010 	movw	r0, #10000	; 0x2710
 8000538:	f000 fee4 	bl	8001304 <setTimer2>
			}
			if(timer1_flag == 1)
 800053c:	4b36      	ldr	r3, [pc, #216]	; (8000618 <fsm_automatic_run+0x238>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d104      	bne.n	800054e <fsm_automatic_run+0x16e>
			{
				display7SEG_AUTO();
 8000544:	f000 f86e 	bl	8000624 <display7SEG_AUTO>
				setTimer1(250);
 8000548:	20fa      	movs	r0, #250	; 0xfa
 800054a:	f000 fec1 	bl	80012d0 <setTimer1>
			}
			if(timer_flag == 1)
 800054e:	4b33      	ldr	r3, [pc, #204]	; (800061c <fsm_automatic_run+0x23c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d157      	bne.n	8000606 <fsm_automatic_run+0x226>
			{
				led7_seg[0]--;
 8000556:	4b32      	ldr	r3, [pc, #200]	; (8000620 <fsm_automatic_run+0x240>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	3b01      	subs	r3, #1
 800055c:	4a30      	ldr	r2, [pc, #192]	; (8000620 <fsm_automatic_run+0x240>)
 800055e:	6013      	str	r3, [r2, #0]
				led7_seg[2]--;
 8000560:	4b2f      	ldr	r3, [pc, #188]	; (8000620 <fsm_automatic_run+0x240>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	3b01      	subs	r3, #1
 8000566:	4a2e      	ldr	r2, [pc, #184]	; (8000620 <fsm_automatic_run+0x240>)
 8000568:	6093      	str	r3, [r2, #8]
				setTimer(1000);
 800056a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056e:	f000 fe95 	bl	800129c <setTimer>
				if(led7_seg[2] == 0)
 8000572:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <fsm_automatic_run+0x240>)
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d145      	bne.n	8000606 <fsm_automatic_run+0x226>
				{
					status = AUTO_YELLOW_RED;
 800057a:	4b25      	ldr	r3, [pc, #148]	; (8000610 <fsm_automatic_run+0x230>)
 800057c:	2205      	movs	r2, #5
 800057e:	601a      	str	r2, [r3, #0]
					led7_seg[2] = 3;
 8000580:	4b27      	ldr	r3, [pc, #156]	; (8000620 <fsm_automatic_run+0x240>)
 8000582:	2203      	movs	r2, #3
 8000584:	609a      	str	r2, [r3, #8]
				}
			}
			break;
 8000586:	e03e      	b.n	8000606 <fsm_automatic_run+0x226>
		case AUTO_YELLOW_RED:
			led_yellow_and_red();
 8000588:	f001 f844 	bl	8001614 <led_yellow_and_red>
			if(isButtonPressed1() == 1) // chuyển sang manual
 800058c:	f7ff fdde 	bl	800014c <isButtonPressed1>
 8000590:	4603      	mov	r3, r0
 8000592:	2b01      	cmp	r3, #1
 8000594:	d108      	bne.n	80005a8 <fsm_automatic_run+0x1c8>
			{
				status = NORMAL_MODE;
 8000596:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <fsm_automatic_run+0x230>)
 8000598:	220c      	movs	r2, #12
 800059a:	601a      	str	r2, [r3, #0]
				clearAllLed();
 800059c:	f000 f9e2 	bl	8000964 <clearAllLed>
				setTimer2(10000);
 80005a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80005a4:	f000 feae 	bl	8001304 <setTimer2>
			}
			if(timer1_flag == 1)
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <fsm_automatic_run+0x238>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d104      	bne.n	80005ba <fsm_automatic_run+0x1da>
			{
				display7SEG_AUTO();
 80005b0:	f000 f838 	bl	8000624 <display7SEG_AUTO>
				setTimer1(250);
 80005b4:	20fa      	movs	r0, #250	; 0xfa
 80005b6:	f000 fe8b 	bl	80012d0 <setTimer1>
			}
			if(timer_flag == 1)
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <fsm_automatic_run+0x23c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d123      	bne.n	800060a <fsm_automatic_run+0x22a>
			{
				led7_seg[0]--;
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <fsm_automatic_run+0x240>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3b01      	subs	r3, #1
 80005c8:	4a15      	ldr	r2, [pc, #84]	; (8000620 <fsm_automatic_run+0x240>)
 80005ca:	6013      	str	r3, [r2, #0]
				led7_seg[1]--;
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <fsm_automatic_run+0x240>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	4a13      	ldr	r2, [pc, #76]	; (8000620 <fsm_automatic_run+0x240>)
 80005d4:	6053      	str	r3, [r2, #4]
				setTimer(1000);
 80005d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005da:	f000 fe5f 	bl	800129c <setTimer>
				if(led7_seg[0] == 0)
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <fsm_automatic_run+0x240>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d111      	bne.n	800060a <fsm_automatic_run+0x22a>
				{
					status = AUTO_RED_GREEN;
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <fsm_automatic_run+0x230>)
 80005e8:	2202      	movs	r2, #2
 80005ea:	601a      	str	r2, [r3, #0]
					led7_seg[0] = 5;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <fsm_automatic_run+0x240>)
 80005ee:	2205      	movs	r2, #5
 80005f0:	601a      	str	r2, [r3, #0]
					led7_seg[1] = 2;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <fsm_automatic_run+0x240>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	605a      	str	r2, [r3, #4]
				}
			}
			break;
 80005f8:	e007      	b.n	800060a <fsm_automatic_run+0x22a>
		default:
			break;
 80005fa:	bf00      	nop
 80005fc:	e006      	b.n	800060c <fsm_automatic_run+0x22c>
			break;
 80005fe:	bf00      	nop
 8000600:	e004      	b.n	800060c <fsm_automatic_run+0x22c>
			break;
 8000602:	bf00      	nop
 8000604:	e002      	b.n	800060c <fsm_automatic_run+0x22c>
			break;
 8000606:	bf00      	nop
 8000608:	e000      	b.n	800060c <fsm_automatic_run+0x22c>
			break;
 800060a:	bf00      	nop

	}
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000088 	.word	0x20000088
 8000614:	40010800 	.word	0x40010800
 8000618:	20000094 	.word	0x20000094
 800061c:	2000008c 	.word	0x2000008c
 8000620:	20000030 	.word	0x20000030

08000624 <display7SEG_AUTO>:
void display7SEG_AUTO()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	if(status == AUTO_RED_GREEN)
 8000628:	4bab      	ldr	r3, [pc, #684]	; (80008d8 <display7SEG_AUTO+0x2b4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b02      	cmp	r3, #2
 800062e:	d15c      	bne.n	80006ea <display7SEG_AUTO+0xc6>
    {
		switch(led_blinky)
 8000630:	4baa      	ldr	r3, [pc, #680]	; (80008dc <display7SEG_AUTO+0x2b8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <display7SEG_AUTO+0x1a>
 8000638:	2b01      	cmp	r3, #1
 800063a:	d026      	beq.n	800068a <display7SEG_AUTO+0x66>
 800063c:	e056      	b.n	80006ec <display7SEG_AUTO+0xc8>
		{
			case 0:
				HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin, RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000644:	48a6      	ldr	r0, [pc, #664]	; (80008e0 <display7SEG_AUTO+0x2bc>)
 8000646:	f001 fb1c 	bl	8001c82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN3_Pin, SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000650:	48a3      	ldr	r0, [pc, #652]	; (80008e0 <display7SEG_AUTO+0x2bc>)
 8000652:	f001 fb16 	bl	8001c82 <HAL_GPIO_WritePin>
				display7SEG1(led7_seg[0] / 10);
 8000656:	4ba3      	ldr	r3, [pc, #652]	; (80008e4 <display7SEG_AUTO+0x2c0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4aa3      	ldr	r2, [pc, #652]	; (80008e8 <display7SEG_AUTO+0x2c4>)
 800065c:	fb82 1203 	smull	r1, r2, r2, r3
 8000660:	1092      	asrs	r2, r2, #2
 8000662:	17db      	asrs	r3, r3, #31
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fbce 	bl	8000e08 <display7SEG1>
				display7SEG2(led7_seg[2] / 10);
 800066c:	4b9d      	ldr	r3, [pc, #628]	; (80008e4 <display7SEG_AUTO+0x2c0>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	4a9d      	ldr	r2, [pc, #628]	; (80008e8 <display7SEG_AUTO+0x2c4>)
 8000672:	fb82 1203 	smull	r1, r2, r2, r3
 8000676:	1092      	asrs	r2, r2, #2
 8000678:	17db      	asrs	r3, r3, #31
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fc51 	bl	8000f24 <display7SEG2>
				led_blinky = 1;
 8000682:	4b96      	ldr	r3, [pc, #600]	; (80008dc <display7SEG_AUTO+0x2b8>)
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
				break;
 8000688:	e030      	b.n	80006ec <display7SEG_AUTO+0xc8>
			case 1:
				HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin, SET);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000690:	4893      	ldr	r0, [pc, #588]	; (80008e0 <display7SEG_AUTO+0x2bc>)
 8000692:	f001 faf6 	bl	8001c82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN3_Pin, RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800069c:	4890      	ldr	r0, [pc, #576]	; (80008e0 <display7SEG_AUTO+0x2bc>)
 800069e:	f001 faf0 	bl	8001c82 <HAL_GPIO_WritePin>
				display7SEG1(led7_seg[0] % 10);
 80006a2:	4b90      	ldr	r3, [pc, #576]	; (80008e4 <display7SEG_AUTO+0x2c0>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	4b90      	ldr	r3, [pc, #576]	; (80008e8 <display7SEG_AUTO+0x2c4>)
 80006a8:	fb83 1302 	smull	r1, r3, r3, r2
 80006ac:	1099      	asrs	r1, r3, #2
 80006ae:	17d3      	asrs	r3, r2, #31
 80006b0:	1ac9      	subs	r1, r1, r3
 80006b2:	460b      	mov	r3, r1
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	440b      	add	r3, r1
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	1ad1      	subs	r1, r2, r3
 80006bc:	4608      	mov	r0, r1
 80006be:	f000 fba3 	bl	8000e08 <display7SEG1>
				display7SEG2(led7_seg[2] % 10);
 80006c2:	4b88      	ldr	r3, [pc, #544]	; (80008e4 <display7SEG_AUTO+0x2c0>)
 80006c4:	689a      	ldr	r2, [r3, #8]
 80006c6:	4b88      	ldr	r3, [pc, #544]	; (80008e8 <display7SEG_AUTO+0x2c4>)
 80006c8:	fb83 1302 	smull	r1, r3, r3, r2
 80006cc:	1099      	asrs	r1, r3, #2
 80006ce:	17d3      	asrs	r3, r2, #31
 80006d0:	1ac9      	subs	r1, r1, r3
 80006d2:	460b      	mov	r3, r1
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	440b      	add	r3, r1
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	1ad1      	subs	r1, r2, r3
 80006dc:	4608      	mov	r0, r1
 80006de:	f000 fc21 	bl	8000f24 <display7SEG2>
				led_blinky = 0;
 80006e2:	4b7e      	ldr	r3, [pc, #504]	; (80008dc <display7SEG_AUTO+0x2b8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
				break;
 80006e8:	e000      	b.n	80006ec <display7SEG_AUTO+0xc8>
		}
    }
 80006ea:	bf00      	nop
	if(status == AUTO_RED_YELLOW)
 80006ec:	4b7a      	ldr	r3, [pc, #488]	; (80008d8 <display7SEG_AUTO+0x2b4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b03      	cmp	r3, #3
 80006f2:	d15c      	bne.n	80007ae <display7SEG_AUTO+0x18a>
	{
		switch(led_blinky)
 80006f4:	4b79      	ldr	r3, [pc, #484]	; (80008dc <display7SEG_AUTO+0x2b8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <display7SEG_AUTO+0xde>
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d026      	beq.n	800074e <display7SEG_AUTO+0x12a>
 8000700:	e056      	b.n	80007b0 <display7SEG_AUTO+0x18c>
		{
			case 0:
				HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin, RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000708:	4875      	ldr	r0, [pc, #468]	; (80008e0 <display7SEG_AUTO+0x2bc>)
 800070a:	f001 faba 	bl	8001c82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN3_Pin, SET);
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000714:	4872      	ldr	r0, [pc, #456]	; (80008e0 <display7SEG_AUTO+0x2bc>)
 8000716:	f001 fab4 	bl	8001c82 <HAL_GPIO_WritePin>
				display7SEG1(led7_seg[0] / 10);
 800071a:	4b72      	ldr	r3, [pc, #456]	; (80008e4 <display7SEG_AUTO+0x2c0>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a72      	ldr	r2, [pc, #456]	; (80008e8 <display7SEG_AUTO+0x2c4>)
 8000720:	fb82 1203 	smull	r1, r2, r2, r3
 8000724:	1092      	asrs	r2, r2, #2
 8000726:	17db      	asrs	r3, r3, #31
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fb6c 	bl	8000e08 <display7SEG1>
				display7SEG2(led7_seg[1] / 10);
 8000730:	4b6c      	ldr	r3, [pc, #432]	; (80008e4 <display7SEG_AUTO+0x2c0>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	4a6c      	ldr	r2, [pc, #432]	; (80008e8 <display7SEG_AUTO+0x2c4>)
 8000736:	fb82 1203 	smull	r1, r2, r2, r3
 800073a:	1092      	asrs	r2, r2, #2
 800073c:	17db      	asrs	r3, r3, #31
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fbef 	bl	8000f24 <display7SEG2>
				led_blinky = 1;
 8000746:	4b65      	ldr	r3, [pc, #404]	; (80008dc <display7SEG_AUTO+0x2b8>)
 8000748:	2201      	movs	r2, #1
 800074a:	601a      	str	r2, [r3, #0]
				break;
 800074c:	e030      	b.n	80007b0 <display7SEG_AUTO+0x18c>
			case 1:
				HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin, SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000754:	4862      	ldr	r0, [pc, #392]	; (80008e0 <display7SEG_AUTO+0x2bc>)
 8000756:	f001 fa94 	bl	8001c82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN3_Pin, RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000760:	485f      	ldr	r0, [pc, #380]	; (80008e0 <display7SEG_AUTO+0x2bc>)
 8000762:	f001 fa8e 	bl	8001c82 <HAL_GPIO_WritePin>
				display7SEG1(led7_seg[0] % 10);
 8000766:	4b5f      	ldr	r3, [pc, #380]	; (80008e4 <display7SEG_AUTO+0x2c0>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b5f      	ldr	r3, [pc, #380]	; (80008e8 <display7SEG_AUTO+0x2c4>)
 800076c:	fb83 1302 	smull	r1, r3, r3, r2
 8000770:	1099      	asrs	r1, r3, #2
 8000772:	17d3      	asrs	r3, r2, #31
 8000774:	1ac9      	subs	r1, r1, r3
 8000776:	460b      	mov	r3, r1
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	440b      	add	r3, r1
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	1ad1      	subs	r1, r2, r3
 8000780:	4608      	mov	r0, r1
 8000782:	f000 fb41 	bl	8000e08 <display7SEG1>
				display7SEG2(led7_seg[1] % 10);
 8000786:	4b57      	ldr	r3, [pc, #348]	; (80008e4 <display7SEG_AUTO+0x2c0>)
 8000788:	685a      	ldr	r2, [r3, #4]
 800078a:	4b57      	ldr	r3, [pc, #348]	; (80008e8 <display7SEG_AUTO+0x2c4>)
 800078c:	fb83 1302 	smull	r1, r3, r3, r2
 8000790:	1099      	asrs	r1, r3, #2
 8000792:	17d3      	asrs	r3, r2, #31
 8000794:	1ac9      	subs	r1, r1, r3
 8000796:	460b      	mov	r3, r1
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	440b      	add	r3, r1
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	1ad1      	subs	r1, r2, r3
 80007a0:	4608      	mov	r0, r1
 80007a2:	f000 fbbf 	bl	8000f24 <display7SEG2>
				led_blinky = 0;
 80007a6:	4b4d      	ldr	r3, [pc, #308]	; (80008dc <display7SEG_AUTO+0x2b8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
				break;
 80007ac:	e000      	b.n	80007b0 <display7SEG_AUTO+0x18c>
		}
	}
 80007ae:	bf00      	nop
	if(status == AUTO_GREEN_RED)
 80007b0:	4b49      	ldr	r3, [pc, #292]	; (80008d8 <display7SEG_AUTO+0x2b4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	d15c      	bne.n	8000872 <display7SEG_AUTO+0x24e>
	{
		switch(led_blinky)
 80007b8:	4b48      	ldr	r3, [pc, #288]	; (80008dc <display7SEG_AUTO+0x2b8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <display7SEG_AUTO+0x1a2>
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d026      	beq.n	8000812 <display7SEG_AUTO+0x1ee>
 80007c4:	e056      	b.n	8000874 <display7SEG_AUTO+0x250>
		{
			case 0:
				HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 7120 	mov.w	r1, #640	; 0x280
 80007cc:	4844      	ldr	r0, [pc, #272]	; (80008e0 <display7SEG_AUTO+0x2bc>)
 80007ce:	f001 fa58 	bl	8001c82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN3_Pin, SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80007d8:	4841      	ldr	r0, [pc, #260]	; (80008e0 <display7SEG_AUTO+0x2bc>)
 80007da:	f001 fa52 	bl	8001c82 <HAL_GPIO_WritePin>
				display7SEG1(led7_seg[2] / 10);
 80007de:	4b41      	ldr	r3, [pc, #260]	; (80008e4 <display7SEG_AUTO+0x2c0>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	4a41      	ldr	r2, [pc, #260]	; (80008e8 <display7SEG_AUTO+0x2c4>)
 80007e4:	fb82 1203 	smull	r1, r2, r2, r3
 80007e8:	1092      	asrs	r2, r2, #2
 80007ea:	17db      	asrs	r3, r3, #31
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fb0a 	bl	8000e08 <display7SEG1>
				display7SEG2(led7_seg[0] / 10);
 80007f4:	4b3b      	ldr	r3, [pc, #236]	; (80008e4 <display7SEG_AUTO+0x2c0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a3b      	ldr	r2, [pc, #236]	; (80008e8 <display7SEG_AUTO+0x2c4>)
 80007fa:	fb82 1203 	smull	r1, r2, r2, r3
 80007fe:	1092      	asrs	r2, r2, #2
 8000800:	17db      	asrs	r3, r3, #31
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fb8d 	bl	8000f24 <display7SEG2>
				led_blinky = 1;
 800080a:	4b34      	ldr	r3, [pc, #208]	; (80008dc <display7SEG_AUTO+0x2b8>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
				break;
 8000810:	e030      	b.n	8000874 <display7SEG_AUTO+0x250>
			case 1:
				HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000818:	4831      	ldr	r0, [pc, #196]	; (80008e0 <display7SEG_AUTO+0x2bc>)
 800081a:	f001 fa32 	bl	8001c82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN3_Pin, RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000824:	482e      	ldr	r0, [pc, #184]	; (80008e0 <display7SEG_AUTO+0x2bc>)
 8000826:	f001 fa2c 	bl	8001c82 <HAL_GPIO_WritePin>
				display7SEG1(led7_seg[2] % 10);
 800082a:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <display7SEG_AUTO+0x2c0>)
 800082c:	689a      	ldr	r2, [r3, #8]
 800082e:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <display7SEG_AUTO+0x2c4>)
 8000830:	fb83 1302 	smull	r1, r3, r3, r2
 8000834:	1099      	asrs	r1, r3, #2
 8000836:	17d3      	asrs	r3, r2, #31
 8000838:	1ac9      	subs	r1, r1, r3
 800083a:	460b      	mov	r3, r1
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	440b      	add	r3, r1
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	1ad1      	subs	r1, r2, r3
 8000844:	4608      	mov	r0, r1
 8000846:	f000 fadf 	bl	8000e08 <display7SEG1>
				display7SEG2(led7_seg[0] % 10);
 800084a:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <display7SEG_AUTO+0x2c0>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <display7SEG_AUTO+0x2c4>)
 8000850:	fb83 1302 	smull	r1, r3, r3, r2
 8000854:	1099      	asrs	r1, r3, #2
 8000856:	17d3      	asrs	r3, r2, #31
 8000858:	1ac9      	subs	r1, r1, r3
 800085a:	460b      	mov	r3, r1
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	440b      	add	r3, r1
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	1ad1      	subs	r1, r2, r3
 8000864:	4608      	mov	r0, r1
 8000866:	f000 fb5d 	bl	8000f24 <display7SEG2>
				led_blinky = 0;
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <display7SEG_AUTO+0x2b8>)
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
				break;
 8000870:	e000      	b.n	8000874 <display7SEG_AUTO+0x250>
		}
	}
 8000872:	bf00      	nop
	if(status == AUTO_YELLOW_RED)
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <display7SEG_AUTO+0x2b4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b05      	cmp	r3, #5
 800087a:	d167      	bne.n	800094c <display7SEG_AUTO+0x328>
	{
		switch(led_blinky)
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <display7SEG_AUTO+0x2b8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d002      	beq.n	800088a <display7SEG_AUTO+0x266>
 8000884:	2b01      	cmp	r3, #1
 8000886:	d031      	beq.n	80008ec <display7SEG_AUTO+0x2c8>
				display7SEG2(led7_seg[0] % 10);
				led_blinky = 0;
				break;
		}
	}
}
 8000888:	e061      	b.n	800094e <display7SEG_AUTO+0x32a>
				HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin, RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000890:	4813      	ldr	r0, [pc, #76]	; (80008e0 <display7SEG_AUTO+0x2bc>)
 8000892:	f001 f9f6 	bl	8001c82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN3_Pin, SET);
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800089c:	4810      	ldr	r0, [pc, #64]	; (80008e0 <display7SEG_AUTO+0x2bc>)
 800089e:	f001 f9f0 	bl	8001c82 <HAL_GPIO_WritePin>
				display7SEG1(led7_seg[1] / 10);
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <display7SEG_AUTO+0x2c0>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <display7SEG_AUTO+0x2c4>)
 80008a8:	fb82 1203 	smull	r1, r2, r2, r3
 80008ac:	1092      	asrs	r2, r2, #2
 80008ae:	17db      	asrs	r3, r3, #31
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 faa8 	bl	8000e08 <display7SEG1>
				display7SEG2(led7_seg[0] / 10);
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <display7SEG_AUTO+0x2c0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <display7SEG_AUTO+0x2c4>)
 80008be:	fb82 1203 	smull	r1, r2, r2, r3
 80008c2:	1092      	asrs	r2, r2, #2
 80008c4:	17db      	asrs	r3, r3, #31
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 fb2b 	bl	8000f24 <display7SEG2>
				led_blinky = 1;
 80008ce:	4b03      	ldr	r3, [pc, #12]	; (80008dc <display7SEG_AUTO+0x2b8>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	601a      	str	r2, [r3, #0]
				break;
 80008d4:	e03b      	b.n	800094e <display7SEG_AUTO+0x32a>
 80008d6:	bf00      	nop
 80008d8:	20000088 	.word	0x20000088
 80008dc:	20000080 	.word	0x20000080
 80008e0:	40010800 	.word	0x40010800
 80008e4:	20000030 	.word	0x20000030
 80008e8:	66666667 	.word	0x66666667
				HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin, SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 7120 	mov.w	r1, #640	; 0x280
 80008f2:	4818      	ldr	r0, [pc, #96]	; (8000954 <display7SEG_AUTO+0x330>)
 80008f4:	f001 f9c5 	bl	8001c82 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN3_Pin, RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80008fe:	4815      	ldr	r0, [pc, #84]	; (8000954 <display7SEG_AUTO+0x330>)
 8000900:	f001 f9bf 	bl	8001c82 <HAL_GPIO_WritePin>
				display7SEG1(led7_seg[1] % 10);
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <display7SEG_AUTO+0x334>)
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <display7SEG_AUTO+0x338>)
 800090a:	fb83 1302 	smull	r1, r3, r3, r2
 800090e:	1099      	asrs	r1, r3, #2
 8000910:	17d3      	asrs	r3, r2, #31
 8000912:	1ac9      	subs	r1, r1, r3
 8000914:	460b      	mov	r3, r1
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	440b      	add	r3, r1
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	1ad1      	subs	r1, r2, r3
 800091e:	4608      	mov	r0, r1
 8000920:	f000 fa72 	bl	8000e08 <display7SEG1>
				display7SEG2(led7_seg[0] % 10);
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <display7SEG_AUTO+0x334>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <display7SEG_AUTO+0x338>)
 800092a:	fb83 1302 	smull	r1, r3, r3, r2
 800092e:	1099      	asrs	r1, r3, #2
 8000930:	17d3      	asrs	r3, r2, #31
 8000932:	1ac9      	subs	r1, r1, r3
 8000934:	460b      	mov	r3, r1
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	440b      	add	r3, r1
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	1ad1      	subs	r1, r2, r3
 800093e:	4608      	mov	r0, r1
 8000940:	f000 faf0 	bl	8000f24 <display7SEG2>
				led_blinky = 0;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <display7SEG_AUTO+0x33c>)
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
				break;
 800094a:	e000      	b.n	800094e <display7SEG_AUTO+0x32a>
	}
 800094c:	bf00      	nop
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40010800 	.word	0x40010800
 8000958:	20000030 	.word	0x20000030
 800095c:	66666667 	.word	0x66666667
 8000960:	20000080 	.word	0x20000080

08000964 <clearAllLed>:
void clearAllLed()
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin | LED_5_Pin | LED_6_Pin, RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	217e      	movs	r1, #126	; 0x7e
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <clearAllLed+0x14>)
 800096e:	f001 f988 	bl	8001c82 <HAL_GPIO_WritePin>
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40010800 	.word	0x40010800

0800097c <fsm_manual_run>:
int temp_yellow = 2;
int temp_green = 3;
int led_blinky1 = 0;

void fsm_manual_run()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin | LED_5_Pin | LED_6_Pin, RESET);
	switch(status)
 8000980:	4b9d      	ldr	r3, [pc, #628]	; (8000bf8 <fsm_manual_run+0x27c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3b0c      	subs	r3, #12
 8000986:	2b03      	cmp	r3, #3
 8000988:	f200 812b 	bhi.w	8000be2 <fsm_manual_run+0x266>
 800098c:	a201      	add	r2, pc, #4	; (adr r2, 8000994 <fsm_manual_run+0x18>)
 800098e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000992:	bf00      	nop
 8000994:	080009a5 	.word	0x080009a5
 8000998:	080009dd 	.word	0x080009dd
 800099c:	08000a89 	.word	0x08000a89
 80009a0:	08000b3d 	.word	0x08000b3d
	{
		case NORMAL_MODE:
			if(timer2_flag == 1)
 80009a4:	4b95      	ldr	r3, [pc, #596]	; (8000bfc <fsm_manual_run+0x280>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d102      	bne.n	80009b2 <fsm_manual_run+0x36>
			{
				status = INIT;
 80009ac:	4b92      	ldr	r3, [pc, #584]	; (8000bf8 <fsm_manual_run+0x27c>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed1() == 1)
 80009b2:	f7ff fbcb 	bl	800014c <isButtonPressed1>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	f040 8114 	bne.w	8000be6 <fsm_manual_run+0x26a>
			{
				status = MODE_LED_RED;
 80009be:	4b8e      	ldr	r3, [pc, #568]	; (8000bf8 <fsm_manual_run+0x27c>)
 80009c0:	220d      	movs	r2, #13
 80009c2:	601a      	str	r2, [r3, #0]
				setTimer2(10000);
 80009c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80009c8:	f000 fc9c 	bl	8001304 <setTimer2>
				setTimer3(500);
 80009cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009d0:	f000 fcb2 	bl	8001338 <setTimer3>
				setTimer4(250);
 80009d4:	20fa      	movs	r0, #250	; 0xfa
 80009d6:	f000 fcc9 	bl	800136c <setTimer4>
			}
			break;
 80009da:	e104      	b.n	8000be6 <fsm_manual_run+0x26a>
		case MODE_LED_RED:
			if(timer3_flag == 1)
 80009dc:	4b88      	ldr	r3, [pc, #544]	; (8000c00 <fsm_manual_run+0x284>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d107      	bne.n	80009f4 <fsm_manual_run+0x78>
			{
				HAL_GPIO_TogglePin(GPIOA, LED_1_Pin | LED_4_Pin);
 80009e4:	2112      	movs	r1, #18
 80009e6:	4887      	ldr	r0, [pc, #540]	; (8000c04 <fsm_manual_run+0x288>)
 80009e8:	f001 f963 	bl	8001cb2 <HAL_GPIO_TogglePin>

				setTimer3(500);
 80009ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009f0:	f000 fca2 	bl	8001338 <setTimer3>
			}
			if(isButtonPressed2() == 1)
 80009f4:	f7ff fbbc 	bl	8000170 <isButtonPressed2>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d104      	bne.n	8000a08 <fsm_manual_run+0x8c>
			{
				temp_red++;
 80009fe:	4b82      	ldr	r3, [pc, #520]	; (8000c08 <fsm_manual_run+0x28c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	4a80      	ldr	r2, [pc, #512]	; (8000c08 <fsm_manual_run+0x28c>)
 8000a06:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPressed3() == 1)
 8000a08:	f7ff fbc4 	bl	8000194 <isButtonPressed3>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d115      	bne.n	8000a3e <fsm_manual_run+0xc2>
			{
				if(temp_red >= 1 && temp_red <= 99)
 8000a12:	4b7d      	ldr	r3, [pc, #500]	; (8000c08 <fsm_manual_run+0x28c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	dd11      	ble.n	8000a3e <fsm_manual_run+0xc2>
 8000a1a:	4b7b      	ldr	r3, [pc, #492]	; (8000c08 <fsm_manual_run+0x28c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b63      	cmp	r3, #99	; 0x63
 8000a20:	dc0d      	bgt.n	8000a3e <fsm_manual_run+0xc2>
				{
					led7_seg[0] = temp_red;
 8000a22:	4b79      	ldr	r3, [pc, #484]	; (8000c08 <fsm_manual_run+0x28c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a79      	ldr	r2, [pc, #484]	; (8000c0c <fsm_manual_run+0x290>)
 8000a28:	6013      	str	r3, [r2, #0]
					led7_seg[1] = temp_red - 3;
 8000a2a:	4b77      	ldr	r3, [pc, #476]	; (8000c08 <fsm_manual_run+0x28c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3b03      	subs	r3, #3
 8000a30:	4a76      	ldr	r2, [pc, #472]	; (8000c0c <fsm_manual_run+0x290>)
 8000a32:	6053      	str	r3, [r2, #4]
					led7_seg[2] = temp_red - 2;
 8000a34:	4b74      	ldr	r3, [pc, #464]	; (8000c08 <fsm_manual_run+0x28c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3b02      	subs	r3, #2
 8000a3a:	4a74      	ldr	r2, [pc, #464]	; (8000c0c <fsm_manual_run+0x290>)
 8000a3c:	6093      	str	r3, [r2, #8]
				}
			}
			if(timer4_flag == 1)
 8000a3e:	4b74      	ldr	r3, [pc, #464]	; (8000c10 <fsm_manual_run+0x294>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d104      	bne.n	8000a50 <fsm_manual_run+0xd4>
			{
				display7SEG_MAN();
 8000a46:	f000 f8e9 	bl	8000c1c <display7SEG_MAN>
				setTimer4(250);
 8000a4a:	20fa      	movs	r0, #250	; 0xfa
 8000a4c:	f000 fc8e 	bl	800136c <setTimer4>
			}

			if(timer2_flag == 1)
 8000a50:	4b6a      	ldr	r3, [pc, #424]	; (8000bfc <fsm_manual_run+0x280>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d102      	bne.n	8000a5e <fsm_manual_run+0xe2>
			{
				status = INIT;
 8000a58:	4b67      	ldr	r3, [pc, #412]	; (8000bf8 <fsm_manual_run+0x27c>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed1() == 1)
 8000a5e:	f7ff fb75 	bl	800014c <isButtonPressed1>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	f040 80c0 	bne.w	8000bea <fsm_manual_run+0x26e>
			{
				status = MODE_LED_YELLOW;
 8000a6a:	4b63      	ldr	r3, [pc, #396]	; (8000bf8 <fsm_manual_run+0x27c>)
 8000a6c:	220e      	movs	r2, #14
 8000a6e:	601a      	str	r2, [r3, #0]
				setTimer2(10000);
 8000a70:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a74:	f000 fc46 	bl	8001304 <setTimer2>
				setTimer3(500);
 8000a78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a7c:	f000 fc5c 	bl	8001338 <setTimer3>
				setTimer4(250);
 8000a80:	20fa      	movs	r0, #250	; 0xfa
 8000a82:	f000 fc73 	bl	800136c <setTimer4>
			}
			break;
 8000a86:	e0b0      	b.n	8000bea <fsm_manual_run+0x26e>
		case MODE_LED_YELLOW:
			if(timer3_flag == 1)
 8000a88:	4b5d      	ldr	r3, [pc, #372]	; (8000c00 <fsm_manual_run+0x284>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d10c      	bne.n	8000aaa <fsm_manual_run+0x12e>
			{
				HAL_GPIO_TogglePin(GPIOA, LED_2_Pin | LED_5_Pin);
 8000a90:	2124      	movs	r1, #36	; 0x24
 8000a92:	485c      	ldr	r0, [pc, #368]	; (8000c04 <fsm_manual_run+0x288>)
 8000a94:	f001 f90d 	bl	8001cb2 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_1_Pin | LED_3_Pin | LED_4_Pin | LED_6_Pin, RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	215a      	movs	r1, #90	; 0x5a
 8000a9c:	4859      	ldr	r0, [pc, #356]	; (8000c04 <fsm_manual_run+0x288>)
 8000a9e:	f001 f8f0 	bl	8001c82 <HAL_GPIO_WritePin>
				setTimer3(500);
 8000aa2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aa6:	f000 fc47 	bl	8001338 <setTimer3>
			}
			if(isButtonPressed2() == 1)
 8000aaa:	f7ff fb61 	bl	8000170 <isButtonPressed2>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d104      	bne.n	8000abe <fsm_manual_run+0x142>
			{
				temp_yellow++;
 8000ab4:	4b57      	ldr	r3, [pc, #348]	; (8000c14 <fsm_manual_run+0x298>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	4a56      	ldr	r2, [pc, #344]	; (8000c14 <fsm_manual_run+0x298>)
 8000abc:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPressed3() == 1)
 8000abe:	f7ff fb69 	bl	8000194 <isButtonPressed3>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d115      	bne.n	8000af4 <fsm_manual_run+0x178>
			{
				if(temp_yellow >= 1 && temp_yellow <= 99)
 8000ac8:	4b52      	ldr	r3, [pc, #328]	; (8000c14 <fsm_manual_run+0x298>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	dd11      	ble.n	8000af4 <fsm_manual_run+0x178>
 8000ad0:	4b50      	ldr	r3, [pc, #320]	; (8000c14 <fsm_manual_run+0x298>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b63      	cmp	r3, #99	; 0x63
 8000ad6:	dc0d      	bgt.n	8000af4 <fsm_manual_run+0x178>
				{
					led7_seg[1] = temp_yellow;
 8000ad8:	4b4e      	ldr	r3, [pc, #312]	; (8000c14 <fsm_manual_run+0x298>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a4b      	ldr	r2, [pc, #300]	; (8000c0c <fsm_manual_run+0x290>)
 8000ade:	6053      	str	r3, [r2, #4]
					led7_seg[0] = temp_yellow + 3;
 8000ae0:	4b4c      	ldr	r3, [pc, #304]	; (8000c14 <fsm_manual_run+0x298>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	3303      	adds	r3, #3
 8000ae6:	4a49      	ldr	r2, [pc, #292]	; (8000c0c <fsm_manual_run+0x290>)
 8000ae8:	6013      	str	r3, [r2, #0]
					led7_seg[2] = temp_yellow + 1;
 8000aea:	4b4a      	ldr	r3, [pc, #296]	; (8000c14 <fsm_manual_run+0x298>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	4a46      	ldr	r2, [pc, #280]	; (8000c0c <fsm_manual_run+0x290>)
 8000af2:	6093      	str	r3, [r2, #8]
				}
			}
			if(timer4_flag == 1)
 8000af4:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <fsm_manual_run+0x294>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d104      	bne.n	8000b06 <fsm_manual_run+0x18a>
			{
				display7SEG_MAN();
 8000afc:	f000 f88e 	bl	8000c1c <display7SEG_MAN>
				setTimer4(250);
 8000b00:	20fa      	movs	r0, #250	; 0xfa
 8000b02:	f000 fc33 	bl	800136c <setTimer4>
			}

			if(timer2_flag == 1)
 8000b06:	4b3d      	ldr	r3, [pc, #244]	; (8000bfc <fsm_manual_run+0x280>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d102      	bne.n	8000b14 <fsm_manual_run+0x198>
			{
				status = INIT;
 8000b0e:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <fsm_manual_run+0x27c>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed1() == 1)
 8000b14:	f7ff fb1a 	bl	800014c <isButtonPressed1>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d167      	bne.n	8000bee <fsm_manual_run+0x272>
			{
				status = MODE_LED_GREEN;
 8000b1e:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <fsm_manual_run+0x27c>)
 8000b20:	220f      	movs	r2, #15
 8000b22:	601a      	str	r2, [r3, #0]
				setTimer2(10000);
 8000b24:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b28:	f000 fbec 	bl	8001304 <setTimer2>
				setTimer3(500);
 8000b2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b30:	f000 fc02 	bl	8001338 <setTimer3>
				setTimer4(250);
 8000b34:	20fa      	movs	r0, #250	; 0xfa
 8000b36:	f000 fc19 	bl	800136c <setTimer4>
			}
			break;
 8000b3a:	e058      	b.n	8000bee <fsm_manual_run+0x272>
		case MODE_LED_GREEN:
			if(timer3_flag == 1)
 8000b3c:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <fsm_manual_run+0x284>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d10c      	bne.n	8000b5e <fsm_manual_run+0x1e2>
			{
				HAL_GPIO_TogglePin(GPIOA, LED_3_Pin | LED_6_Pin);
 8000b44:	2148      	movs	r1, #72	; 0x48
 8000b46:	482f      	ldr	r0, [pc, #188]	; (8000c04 <fsm_manual_run+0x288>)
 8000b48:	f001 f8b3 	bl	8001cb2 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LED_1_Pin | LED_2_Pin | LED_4_Pin | LED_5_Pin, RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2136      	movs	r1, #54	; 0x36
 8000b50:	482c      	ldr	r0, [pc, #176]	; (8000c04 <fsm_manual_run+0x288>)
 8000b52:	f001 f896 	bl	8001c82 <HAL_GPIO_WritePin>
				setTimer3(500);
 8000b56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5a:	f000 fbed 	bl	8001338 <setTimer3>
			}
			if(isButtonPressed2() == 1)
 8000b5e:	f7ff fb07 	bl	8000170 <isButtonPressed2>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d104      	bne.n	8000b72 <fsm_manual_run+0x1f6>
			{
				temp_green++;
 8000b68:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <fsm_manual_run+0x29c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4a2a      	ldr	r2, [pc, #168]	; (8000c18 <fsm_manual_run+0x29c>)
 8000b70:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPressed3() == 1)
 8000b72:	f7ff fb0f 	bl	8000194 <isButtonPressed3>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d115      	bne.n	8000ba8 <fsm_manual_run+0x22c>
			{
				if(temp_green >= 1 && temp_green <= 99)
 8000b7c:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <fsm_manual_run+0x29c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	dd11      	ble.n	8000ba8 <fsm_manual_run+0x22c>
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <fsm_manual_run+0x29c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b63      	cmp	r3, #99	; 0x63
 8000b8a:	dc0d      	bgt.n	8000ba8 <fsm_manual_run+0x22c>
				{
					led7_seg[2] = temp_green;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <fsm_manual_run+0x29c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1e      	ldr	r2, [pc, #120]	; (8000c0c <fsm_manual_run+0x290>)
 8000b92:	6093      	str	r3, [r2, #8]
					led7_seg[0] = temp_green + 2;
 8000b94:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <fsm_manual_run+0x29c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3302      	adds	r3, #2
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <fsm_manual_run+0x290>)
 8000b9c:	6013      	str	r3, [r2, #0]
					led7_seg[1] = temp_green - 1;
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <fsm_manual_run+0x29c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <fsm_manual_run+0x290>)
 8000ba6:	6053      	str	r3, [r2, #4]
				}
			}
			if(timer4_flag == 1)
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <fsm_manual_run+0x294>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d104      	bne.n	8000bba <fsm_manual_run+0x23e>
			{
				display7SEG_MAN();
 8000bb0:	f000 f834 	bl	8000c1c <display7SEG_MAN>
				setTimer4(250);
 8000bb4:	20fa      	movs	r0, #250	; 0xfa
 8000bb6:	f000 fbd9 	bl	800136c <setTimer4>
			}

			if(timer2_flag == 1)
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <fsm_manual_run+0x280>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d102      	bne.n	8000bc8 <fsm_manual_run+0x24c>
			{
				status = INIT;
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <fsm_manual_run+0x27c>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed1() == 1)
 8000bc8:	f7ff fac0 	bl	800014c <isButtonPressed1>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d10f      	bne.n	8000bf2 <fsm_manual_run+0x276>
			{
				status = NORMAL_MODE;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <fsm_manual_run+0x27c>)
 8000bd4:	220c      	movs	r2, #12
 8000bd6:	601a      	str	r2, [r3, #0]
				setTimer2(10000);
 8000bd8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bdc:	f000 fb92 	bl	8001304 <setTimer2>
//				setTimer3(500);
//				setTimer4(250);
			}
			break;
 8000be0:	e007      	b.n	8000bf2 <fsm_manual_run+0x276>
		default:
			break;
 8000be2:	bf00      	nop
 8000be4:	e006      	b.n	8000bf4 <fsm_manual_run+0x278>
			break;
 8000be6:	bf00      	nop
 8000be8:	e004      	b.n	8000bf4 <fsm_manual_run+0x278>
			break;
 8000bea:	bf00      	nop
 8000bec:	e002      	b.n	8000bf4 <fsm_manual_run+0x278>
			break;
 8000bee:	bf00      	nop
 8000bf0:	e000      	b.n	8000bf4 <fsm_manual_run+0x278>
			break;
 8000bf2:	bf00      	nop
	}
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000088 	.word	0x20000088
 8000bfc:	2000009c 	.word	0x2000009c
 8000c00:	200000a4 	.word	0x200000a4
 8000c04:	40010800 	.word	0x40010800
 8000c08:	2000003c 	.word	0x2000003c
 8000c0c:	20000030 	.word	0x20000030
 8000c10:	200000ac 	.word	0x200000ac
 8000c14:	20000040 	.word	0x20000040
 8000c18:	20000044 	.word	0x20000044

08000c1c <display7SEG_MAN>:

void display7SEG_MAN()
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	if(status == MODE_LED_RED)
 8000c20:	4b74      	ldr	r3, [pc, #464]	; (8000df4 <display7SEG_MAN+0x1d8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b0d      	cmp	r3, #13
 8000c26:	d147      	bne.n	8000cb8 <display7SEG_MAN+0x9c>
	    {
			switch(led_blinky1)
 8000c28:	4b73      	ldr	r3, [pc, #460]	; (8000df8 <display7SEG_MAN+0x1dc>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <display7SEG_MAN+0x1a>
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d01e      	beq.n	8000c72 <display7SEG_MAN+0x56>
 8000c34:	e041      	b.n	8000cba <display7SEG_MAN+0x9e>
			{
				case 0:
					HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin, RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000c3c:	486f      	ldr	r0, [pc, #444]	; (8000dfc <display7SEG_MAN+0x1e0>)
 8000c3e:	f001 f820 	bl	8001c82 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN3_Pin, SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000c48:	486c      	ldr	r0, [pc, #432]	; (8000dfc <display7SEG_MAN+0x1e0>)
 8000c4a:	f001 f81a 	bl	8001c82 <HAL_GPIO_WritePin>
					display7SEG1(led7_seg[0] / 10);
 8000c4e:	4b6c      	ldr	r3, [pc, #432]	; (8000e00 <display7SEG_MAN+0x1e4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a6c      	ldr	r2, [pc, #432]	; (8000e04 <display7SEG_MAN+0x1e8>)
 8000c54:	fb82 1203 	smull	r1, r2, r2, r3
 8000c58:	1092      	asrs	r2, r2, #2
 8000c5a:	17db      	asrs	r3, r3, #31
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f8d2 	bl	8000e08 <display7SEG1>
					display7SEG2(0);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f95d 	bl	8000f24 <display7SEG2>
					led_blinky1 = 1;
 8000c6a:	4b63      	ldr	r3, [pc, #396]	; (8000df8 <display7SEG_MAN+0x1dc>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]
					break;
 8000c70:	e023      	b.n	8000cba <display7SEG_MAN+0x9e>
				case 1:
					HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin, SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000c78:	4860      	ldr	r0, [pc, #384]	; (8000dfc <display7SEG_MAN+0x1e0>)
 8000c7a:	f001 f802 	bl	8001c82 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN3_Pin, RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000c84:	485d      	ldr	r0, [pc, #372]	; (8000dfc <display7SEG_MAN+0x1e0>)
 8000c86:	f000 fffc 	bl	8001c82 <HAL_GPIO_WritePin>
					display7SEG1(led7_seg[0] % 10);
 8000c8a:	4b5d      	ldr	r3, [pc, #372]	; (8000e00 <display7SEG_MAN+0x1e4>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b5d      	ldr	r3, [pc, #372]	; (8000e04 <display7SEG_MAN+0x1e8>)
 8000c90:	fb83 1302 	smull	r1, r3, r3, r2
 8000c94:	1099      	asrs	r1, r3, #2
 8000c96:	17d3      	asrs	r3, r2, #31
 8000c98:	1ac9      	subs	r1, r1, r3
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	1ad1      	subs	r1, r2, r3
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	f000 f8af 	bl	8000e08 <display7SEG1>
					display7SEG2(2);
 8000caa:	2002      	movs	r0, #2
 8000cac:	f000 f93a 	bl	8000f24 <display7SEG2>
					led_blinky1 = 0;
 8000cb0:	4b51      	ldr	r3, [pc, #324]	; (8000df8 <display7SEG_MAN+0x1dc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
					break;
 8000cb6:	e000      	b.n	8000cba <display7SEG_MAN+0x9e>
			}
	    }
 8000cb8:	bf00      	nop
		if(status == MODE_LED_YELLOW)
 8000cba:	4b4e      	ldr	r3, [pc, #312]	; (8000df4 <display7SEG_MAN+0x1d8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b0e      	cmp	r3, #14
 8000cc0:	d147      	bne.n	8000d52 <display7SEG_MAN+0x136>
		{
			switch(led_blinky1)
 8000cc2:	4b4d      	ldr	r3, [pc, #308]	; (8000df8 <display7SEG_MAN+0x1dc>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d002      	beq.n	8000cd0 <display7SEG_MAN+0xb4>
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d01e      	beq.n	8000d0c <display7SEG_MAN+0xf0>
 8000cce:	e041      	b.n	8000d54 <display7SEG_MAN+0x138>
			{
				case 0:
					HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin, RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000cd6:	4849      	ldr	r0, [pc, #292]	; (8000dfc <display7SEG_MAN+0x1e0>)
 8000cd8:	f000 ffd3 	bl	8001c82 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN3_Pin, SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000ce2:	4846      	ldr	r0, [pc, #280]	; (8000dfc <display7SEG_MAN+0x1e0>)
 8000ce4:	f000 ffcd 	bl	8001c82 <HAL_GPIO_WritePin>
					display7SEG1(led7_seg[1] / 10);
 8000ce8:	4b45      	ldr	r3, [pc, #276]	; (8000e00 <display7SEG_MAN+0x1e4>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4a45      	ldr	r2, [pc, #276]	; (8000e04 <display7SEG_MAN+0x1e8>)
 8000cee:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf2:	1092      	asrs	r2, r2, #2
 8000cf4:	17db      	asrs	r3, r3, #31
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f885 	bl	8000e08 <display7SEG1>
					display7SEG2(0);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f910 	bl	8000f24 <display7SEG2>
					led_blinky1 = 1;
 8000d04:	4b3c      	ldr	r3, [pc, #240]	; (8000df8 <display7SEG_MAN+0x1dc>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	601a      	str	r2, [r3, #0]
					break;
 8000d0a:	e023      	b.n	8000d54 <display7SEG_MAN+0x138>
				case 1:
					HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin, SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000d12:	483a      	ldr	r0, [pc, #232]	; (8000dfc <display7SEG_MAN+0x1e0>)
 8000d14:	f000 ffb5 	bl	8001c82 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN3_Pin, RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d1e:	4837      	ldr	r0, [pc, #220]	; (8000dfc <display7SEG_MAN+0x1e0>)
 8000d20:	f000 ffaf 	bl	8001c82 <HAL_GPIO_WritePin>
					display7SEG1(led7_seg[1] % 10);
 8000d24:	4b36      	ldr	r3, [pc, #216]	; (8000e00 <display7SEG_MAN+0x1e4>)
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <display7SEG_MAN+0x1e8>)
 8000d2a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d2e:	1099      	asrs	r1, r3, #2
 8000d30:	17d3      	asrs	r3, r2, #31
 8000d32:	1ac9      	subs	r1, r1, r3
 8000d34:	460b      	mov	r3, r1
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	440b      	add	r3, r1
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	1ad1      	subs	r1, r2, r3
 8000d3e:	4608      	mov	r0, r1
 8000d40:	f000 f862 	bl	8000e08 <display7SEG1>
					display7SEG2(3);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f8ed 	bl	8000f24 <display7SEG2>
					led_blinky1 = 0;
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <display7SEG_MAN+0x1dc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
					break;
 8000d50:	e000      	b.n	8000d54 <display7SEG_MAN+0x138>
			}
		}
 8000d52:	bf00      	nop
		if(status == MODE_LED_GREEN)
 8000d54:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <display7SEG_MAN+0x1d8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d147      	bne.n	8000dec <display7SEG_MAN+0x1d0>
		{
			switch(led_blinky1)
 8000d5c:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <display7SEG_MAN+0x1dc>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <display7SEG_MAN+0x14e>
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d01e      	beq.n	8000da6 <display7SEG_MAN+0x18a>
					display7SEG2(4);
					led_blinky1 = 0;
					break;
			}
		}
}
 8000d68:	e041      	b.n	8000dee <display7SEG_MAN+0x1d2>
					HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin, RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000d70:	4822      	ldr	r0, [pc, #136]	; (8000dfc <display7SEG_MAN+0x1e0>)
 8000d72:	f000 ff86 	bl	8001c82 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN3_Pin, SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d7c:	481f      	ldr	r0, [pc, #124]	; (8000dfc <display7SEG_MAN+0x1e0>)
 8000d7e:	f000 ff80 	bl	8001c82 <HAL_GPIO_WritePin>
					display7SEG1(led7_seg[2] / 10);
 8000d82:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <display7SEG_MAN+0x1e4>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <display7SEG_MAN+0x1e8>)
 8000d88:	fb82 1203 	smull	r1, r2, r2, r3
 8000d8c:	1092      	asrs	r2, r2, #2
 8000d8e:	17db      	asrs	r3, r3, #31
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f838 	bl	8000e08 <display7SEG1>
					display7SEG2(0);
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f000 f8c3 	bl	8000f24 <display7SEG2>
					led_blinky1 = 1;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <display7SEG_MAN+0x1dc>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	601a      	str	r2, [r3, #0]
					break;
 8000da4:	e023      	b.n	8000dee <display7SEG_MAN+0x1d2>
					HAL_GPIO_WritePin(GPIOA, EN0_Pin | EN2_Pin, SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000dac:	4813      	ldr	r0, [pc, #76]	; (8000dfc <display7SEG_MAN+0x1e0>)
 8000dae:	f000 ff68 	bl	8001c82 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN3_Pin, RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000db8:	4810      	ldr	r0, [pc, #64]	; (8000dfc <display7SEG_MAN+0x1e0>)
 8000dba:	f000 ff62 	bl	8001c82 <HAL_GPIO_WritePin>
					display7SEG1(led7_seg[2] % 10);
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <display7SEG_MAN+0x1e4>)
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <display7SEG_MAN+0x1e8>)
 8000dc4:	fb83 1302 	smull	r1, r3, r3, r2
 8000dc8:	1099      	asrs	r1, r3, #2
 8000dca:	17d3      	asrs	r3, r2, #31
 8000dcc:	1ac9      	subs	r1, r1, r3
 8000dce:	460b      	mov	r3, r1
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	1ad1      	subs	r1, r2, r3
 8000dd8:	4608      	mov	r0, r1
 8000dda:	f000 f815 	bl	8000e08 <display7SEG1>
					display7SEG2(4);
 8000dde:	2004      	movs	r0, #4
 8000de0:	f000 f8a0 	bl	8000f24 <display7SEG2>
					led_blinky1 = 0;
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <display7SEG_MAN+0x1dc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
					break;
 8000dea:	e000      	b.n	8000dee <display7SEG_MAN+0x1d2>
		}
 8000dec:	bf00      	nop
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000088 	.word	0x20000088
 8000df8:	20000084 	.word	0x20000084
 8000dfc:	40010800 	.word	0x40010800
 8000e00:	20000030 	.word	0x20000030
 8000e04:	66666667 	.word	0x66666667

08000e08 <display7SEG1>:
#include "led7_segment.h"

int temp = 0;

void display7SEG1(int temp)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b09      	cmp	r3, #9
 8000e14:	d87f      	bhi.n	8000f16 <display7SEG1+0x10e>
 8000e16:	a201      	add	r2, pc, #4	; (adr r2, 8000e1c <display7SEG1+0x14>)
 8000e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1c:	08000e45 	.word	0x08000e45
 8000e20:	08000e5b 	.word	0x08000e5b
 8000e24:	08000e71 	.word	0x08000e71
 8000e28:	08000e87 	.word	0x08000e87
 8000e2c:	08000e9d 	.word	0x08000e9d
 8000e30:	08000eb3 	.word	0x08000eb3
 8000e34:	08000ec9 	.word	0x08000ec9
 8000e38:	08000edf 	.word	0x08000edf
 8000e3c:	08000ef5 	.word	0x08000ef5
 8000e40:	08000f01 	.word	0x08000f01
	switch(temp)
	{
		case 0:
			HAL_GPIO_WritePin(GPIOB, SEG_6_Pin, SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2140      	movs	r1, #64	; 0x40
 8000e48:	4835      	ldr	r0, [pc, #212]	; (8000f20 <display7SEG1+0x118>)
 8000e4a:	f000 ff1a 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin , RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	213f      	movs	r1, #63	; 0x3f
 8000e52:	4833      	ldr	r0, [pc, #204]	; (8000f20 <display7SEG1+0x118>)
 8000e54:	f000 ff15 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000e58:	e05e      	b.n	8000f18 <display7SEG1+0x110>
		case 1:
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2179      	movs	r1, #121	; 0x79
 8000e5e:	4830      	ldr	r0, [pc, #192]	; (8000f20 <display7SEG1+0x118>)
 8000e60:	f000 ff0f 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_2_Pin, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2106      	movs	r1, #6
 8000e68:	482d      	ldr	r0, [pc, #180]	; (8000f20 <display7SEG1+0x118>)
 8000e6a:	f000 ff0a 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000e6e:	e053      	b.n	8000f18 <display7SEG1+0x110>
		case 2:
			HAL_GPIO_WritePin(GPIOB, SEG_2_Pin | SEG_5_Pin , SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	2124      	movs	r1, #36	; 0x24
 8000e74:	482a      	ldr	r0, [pc, #168]	; (8000f20 <display7SEG1+0x118>)
 8000e76:	f000 ff04 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_3_Pin | SEG_4_Pin | SEG_6_Pin, RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	215b      	movs	r1, #91	; 0x5b
 8000e7e:	4828      	ldr	r0, [pc, #160]	; (8000f20 <display7SEG1+0x118>)
 8000e80:	f000 feff 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000e84:	e048      	b.n	8000f18 <display7SEG1+0x110>
		case 3:
			HAL_GPIO_WritePin(GPIOB, SEG_4_Pin | SEG_5_Pin , SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2130      	movs	r1, #48	; 0x30
 8000e8a:	4825      	ldr	r0, [pc, #148]	; (8000f20 <display7SEG1+0x118>)
 8000e8c:	f000 fef9 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_2_Pin | SEG_3_Pin | SEG_6_Pin, RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	214f      	movs	r1, #79	; 0x4f
 8000e94:	4822      	ldr	r0, [pc, #136]	; (8000f20 <display7SEG1+0x118>)
 8000e96:	f000 fef4 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000e9a:	e03d      	b.n	8000f18 <display7SEG1+0x110>
		case 4:
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin , SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2119      	movs	r1, #25
 8000ea0:	481f      	ldr	r0, [pc, #124]	; (8000f20 <display7SEG1+0x118>)
 8000ea2:	f000 feee 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_1_Pin |SEG_2_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2166      	movs	r1, #102	; 0x66
 8000eaa:	481d      	ldr	r0, [pc, #116]	; (8000f20 <display7SEG1+0x118>)
 8000eac:	f000 fee9 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000eb0:	e032      	b.n	8000f18 <display7SEG1+0x110>
		case 5:
			HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_4_Pin , SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2112      	movs	r1, #18
 8000eb6:	481a      	ldr	r0, [pc, #104]	; (8000f20 <display7SEG1+0x118>)
 8000eb8:	f000 fee3 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	216d      	movs	r1, #109	; 0x6d
 8000ec0:	4817      	ldr	r0, [pc, #92]	; (8000f20 <display7SEG1+0x118>)
 8000ec2:	f000 fede 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000ec6:	e027      	b.n	8000f18 <display7SEG1+0x110>
		case 6:
			HAL_GPIO_WritePin(GPIOB, SEG_1_Pin , SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2102      	movs	r1, #2
 8000ecc:	4814      	ldr	r0, [pc, #80]	; (8000f20 <display7SEG1+0x118>)
 8000ece:	f000 fed8 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	217d      	movs	r1, #125	; 0x7d
 8000ed6:	4812      	ldr	r0, [pc, #72]	; (8000f20 <display7SEG1+0x118>)
 8000ed8:	f000 fed3 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000edc:	e01c      	b.n	8000f18 <display7SEG1+0x110>
		case 7:
			HAL_GPIO_WritePin(GPIOB, SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2178      	movs	r1, #120	; 0x78
 8000ee2:	480f      	ldr	r0, [pc, #60]	; (8000f20 <display7SEG1+0x118>)
 8000ee4:	f000 fecd 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin, RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2107      	movs	r1, #7
 8000eec:	480c      	ldr	r0, [pc, #48]	; (8000f20 <display7SEG1+0x118>)
 8000eee:	f000 fec8 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000ef2:	e011      	b.n	8000f18 <display7SEG1+0x110>
		case 8:
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	217f      	movs	r1, #127	; 0x7f
 8000ef8:	4809      	ldr	r0, [pc, #36]	; (8000f20 <display7SEG1+0x118>)
 8000efa:	f000 fec2 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000efe:	e00b      	b.n	8000f18 <display7SEG1+0x110>
		case 9:
			HAL_GPIO_WritePin(GPIOB, SEG_4_Pin, SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2110      	movs	r1, #16
 8000f04:	4806      	ldr	r0, [pc, #24]	; (8000f20 <display7SEG1+0x118>)
 8000f06:	f000 febc 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	216f      	movs	r1, #111	; 0x6f
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <display7SEG1+0x118>)
 8000f10:	f000 feb7 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000f14:	e000      	b.n	8000f18 <display7SEG1+0x110>
		default:
			break;
 8000f16:	bf00      	nop
	}
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40010c00 	.word	0x40010c00

08000f24 <display7SEG2>:

void display7SEG2(int temp)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b09      	cmp	r3, #9
 8000f30:	f200 8094 	bhi.w	800105c <display7SEG2+0x138>
 8000f34:	a201      	add	r2, pc, #4	; (adr r2, 8000f3c <display7SEG2+0x18>)
 8000f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3a:	bf00      	nop
 8000f3c:	08000f65 	.word	0x08000f65
 8000f40:	08000f7f 	.word	0x08000f7f
 8000f44:	08000f99 	.word	0x08000f99
 8000f48:	08000fb3 	.word	0x08000fb3
 8000f4c:	08000fcd 	.word	0x08000fcd
 8000f50:	08000fe7 	.word	0x08000fe7
 8000f54:	08001001 	.word	0x08001001
 8000f58:	0800101b 	.word	0x0800101b
 8000f5c:	08001035 	.word	0x08001035
 8000f60:	08001043 	.word	0x08001043
	switch(temp)
	{
		case 0:
			HAL_GPIO_WritePin(GPIOB, SEG_13_Pin, SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6a:	483f      	ldr	r0, [pc, #252]	; (8001068 <display7SEG2+0x144>)
 8000f6c:	f000 fe89 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_7_Pin | SEG_8_Pin | SEG_9_Pin | SEG_10_Pin | SEG_11_Pin | SEG_12_Pin , RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8000f76:	483c      	ldr	r0, [pc, #240]	; (8001068 <display7SEG2+0x144>)
 8000f78:	f000 fe83 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000f7c:	e06f      	b.n	800105e <display7SEG2+0x13a>
		case 1:
			HAL_GPIO_WritePin(GPIOB, SEG_7_Pin | SEG_10_Pin | SEG_11_Pin | SEG_12_Pin | SEG_13_Pin, SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 5172 	mov.w	r1, #15488	; 0x3c80
 8000f84:	4838      	ldr	r0, [pc, #224]	; (8001068 <display7SEG2+0x144>)
 8000f86:	f000 fe7c 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_8_Pin | SEG_9_Pin, RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f90:	4835      	ldr	r0, [pc, #212]	; (8001068 <display7SEG2+0x144>)
 8000f92:	f000 fe76 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000f96:	e062      	b.n	800105e <display7SEG2+0x13a>
		case 2:
			HAL_GPIO_WritePin(GPIOB, SEG_9_Pin | SEG_12_Pin , SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000f9e:	4832      	ldr	r0, [pc, #200]	; (8001068 <display7SEG2+0x144>)
 8000fa0:	f000 fe6f 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_7_Pin | SEG_8_Pin |SEG_10_Pin | SEG_11_Pin | SEG_13_Pin, RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 5136 	mov.w	r1, #11648	; 0x2d80
 8000faa:	482f      	ldr	r0, [pc, #188]	; (8001068 <display7SEG2+0x144>)
 8000fac:	f000 fe69 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000fb0:	e055      	b.n	800105e <display7SEG2+0x13a>
		case 3:
			HAL_GPIO_WritePin(GPIOB, SEG_11_Pin | SEG_12_Pin , SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000fb8:	482b      	ldr	r0, [pc, #172]	; (8001068 <display7SEG2+0x144>)
 8000fba:	f000 fe62 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_7_Pin | SEG_8_Pin |SEG_9_Pin | SEG_10_Pin | SEG_13_Pin, RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 8000fc4:	4828      	ldr	r0, [pc, #160]	; (8001068 <display7SEG2+0x144>)
 8000fc6:	f000 fe5c 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000fca:	e048      	b.n	800105e <display7SEG2+0x13a>
		case 4:
			HAL_GPIO_WritePin(GPIOB, SEG_7_Pin | SEG_10_Pin | SEG_11_Pin , SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000fd2:	4825      	ldr	r0, [pc, #148]	; (8001068 <display7SEG2+0x144>)
 8000fd4:	f000 fe55 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_8_Pin | SEG_9_Pin | SEG_12_Pin | SEG_13_Pin, RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8000fde:	4822      	ldr	r0, [pc, #136]	; (8001068 <display7SEG2+0x144>)
 8000fe0:	f000 fe4f 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000fe4:	e03b      	b.n	800105e <display7SEG2+0x13a>
		case 5:
			HAL_GPIO_WritePin(GPIOB, SEG_8_Pin | SEG_11_Pin , SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000fec:	481e      	ldr	r0, [pc, #120]	; (8001068 <display7SEG2+0x144>)
 8000fee:	f000 fe48 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_7_Pin |SEG_9_Pin | SEG_10_Pin | SEG_12_Pin | SEG_13_Pin, RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 515a 	mov.w	r1, #13952	; 0x3680
 8000ff8:	481b      	ldr	r0, [pc, #108]	; (8001068 <display7SEG2+0x144>)
 8000ffa:	f000 fe42 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8000ffe:	e02e      	b.n	800105e <display7SEG2+0x13a>
		case 6:
			HAL_GPIO_WritePin(GPIOB, SEG_8_Pin , SET);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001006:	4818      	ldr	r0, [pc, #96]	; (8001068 <display7SEG2+0x144>)
 8001008:	f000 fe3b 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_7_Pin |SEG_9_Pin | SEG_10_Pin | SEG_11_Pin | SEG_12_Pin | SEG_13_Pin, RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8001012:	4815      	ldr	r0, [pc, #84]	; (8001068 <display7SEG2+0x144>)
 8001014:	f000 fe35 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8001018:	e021      	b.n	800105e <display7SEG2+0x13a>
		case 7:
			HAL_GPIO_WritePin(GPIOB, SEG_10_Pin | SEG_11_Pin | SEG_12_Pin | SEG_13_Pin, SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001020:	4811      	ldr	r0, [pc, #68]	; (8001068 <display7SEG2+0x144>)
 8001022:	f000 fe2e 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_7_Pin | SEG_8_Pin | SEG_2_Pin, RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800102c:	480e      	ldr	r0, [pc, #56]	; (8001068 <display7SEG2+0x144>)
 800102e:	f000 fe28 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8001032:	e014      	b.n	800105e <display7SEG2+0x13a>
		case 8:
			HAL_GPIO_WritePin(GPIOB, SEG_7_Pin | SEG_8_Pin | SEG_9_Pin | SEG_10_Pin | SEG_11_Pin | SEG_12_Pin | SEG_13_Pin , RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 800103a:	480b      	ldr	r0, [pc, #44]	; (8001068 <display7SEG2+0x144>)
 800103c:	f000 fe21 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 8001040:	e00d      	b.n	800105e <display7SEG2+0x13a>
		case 9:
			HAL_GPIO_WritePin(GPIOB, SEG_11_Pin, SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <display7SEG2+0x144>)
 800104a:	f000 fe1a 	bl	8001c82 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, SEG_7_Pin | SEG_8_Pin | SEG_9_Pin | SEG_10_Pin | SEG_12_Pin | SEG_13_Pin , RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 515e 	mov.w	r1, #14208	; 0x3780
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <display7SEG2+0x144>)
 8001056:	f000 fe14 	bl	8001c82 <HAL_GPIO_WritePin>
			break;
 800105a:	e000      	b.n	800105e <display7SEG2+0x13a>
		default:
			break;
 800105c:	bf00      	nop
	}
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40010c00 	.word	0x40010c00

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001070:	f000 fb06 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001074:	f000 f814 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001078:	f000 f89a 	bl	80011b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800107c:	f000 f84c 	bl	8001118 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <main+0x2c>)
 8001082:	f001 fa5b 	bl	800253c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <main+0x30>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]
  while(1)
  {
    /* USER CODE END WHILE */
	 fsm_automatic_run();
 800108c:	f7ff f9a8 	bl	80003e0 <fsm_automatic_run>
	 fsm_manual_run();
 8001090:	f7ff fc74 	bl	800097c <fsm_manual_run>
	 fsm_automatic_run();
 8001094:	e7fa      	b.n	800108c <main+0x20>
 8001096:	bf00      	nop
 8001098:	200000c4 	.word	0x200000c4
 800109c:	20000088 	.word	0x20000088

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b090      	sub	sp, #64	; 0x40
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0318 	add.w	r3, r7, #24
 80010aa:	2228      	movs	r2, #40	; 0x28
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fdf4 	bl	8002c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c6:	2301      	movs	r3, #1
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ca:	2310      	movs	r3, #16
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fe04 	bl	8001ce4 <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010e2:	f000 f8d5 	bl	8001290 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	230f      	movs	r3, #15
 80010e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 f870 	bl	80021e4 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800110a:	f000 f8c1 	bl	8001290 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3740      	adds	r7, #64	; 0x40
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <MX_TIM2_Init+0x94>)
 8001136:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_TIM2_Init+0x94>)
 800113e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001142:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_TIM2_Init+0x94>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_TIM2_Init+0x94>)
 800114c:	2209      	movs	r2, #9
 800114e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_TIM2_Init+0x94>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_TIM2_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800115c:	4813      	ldr	r0, [pc, #76]	; (80011ac <MX_TIM2_Init+0x94>)
 800115e:	f001 f99d 	bl	800249c <HAL_TIM_Base_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001168:	f000 f892 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001170:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	4619      	mov	r1, r3
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <MX_TIM2_Init+0x94>)
 800117a:	f001 fb1b 	bl	80027b4 <HAL_TIM_ConfigClockSource>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001184:	f000 f884 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_TIM2_Init+0x94>)
 8001196:	f001 fcf3 	bl	8002b80 <HAL_TIMEx_MasterConfigSynchronization>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011a0:	f000 f876 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200000c4 	.word	0x200000c4

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b29      	ldr	r3, [pc, #164]	; (800126c <MX_GPIO_Init+0xbc>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a28      	ldr	r2, [pc, #160]	; (800126c <MX_GPIO_Init+0xbc>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b26      	ldr	r3, [pc, #152]	; (800126c <MX_GPIO_Init+0xbc>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <MX_GPIO_Init+0xbc>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a22      	ldr	r2, [pc, #136]	; (800126c <MX_GPIO_Init+0xbc>)
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <MX_GPIO_Init+0xbc>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80011f4:	2200      	movs	r2, #0
 80011f6:	f640 71fe 	movw	r1, #4094	; 0xffe
 80011fa:	481d      	ldr	r0, [pc, #116]	; (8001270 <MX_GPIO_Init+0xc0>)
 80011fc:	f000 fd41 	bl	8001c82 <HAL_GPIO_WritePin>
                          |LED_5_Pin|LED_6_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_10_Pin
 8001200:	2200      	movs	r2, #0
 8001202:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001206:	481b      	ldr	r0, [pc, #108]	; (8001274 <MX_GPIO_Init+0xc4>)
 8001208:	f000 fd3b 	bl	8001c82 <HAL_GPIO_WritePin>
                          |SEG_8_Pin|SEG_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
                           LED_5_Pin LED_6_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800120c:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001210:	60bb      	str	r3, [r7, #8]
                          |LED_5_Pin|LED_6_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2302      	movs	r3, #2
 800121c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	4619      	mov	r1, r3
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <MX_GPIO_Init+0xc0>)
 8001226:	f000 fb9b 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_10_Pin
                           SEG_11_Pin SEG_12_Pin SEG_13_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin SEG_7_Pin
                           SEG_8_Pin SEG_9_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_10_Pin
 800122a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800122e:	60bb      	str	r3, [r7, #8]
                          |SEG_11_Pin|SEG_12_Pin|SEG_13_Pin|SEG_3_Pin
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|SEG_7_Pin
                          |SEG_8_Pin|SEG_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2302      	movs	r3, #2
 800123a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	4619      	mov	r1, r3
 8001242:	480c      	ldr	r0, [pc, #48]	; (8001274 <MX_GPIO_Init+0xc4>)
 8001244:	f000 fb8c 	bl	8001960 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8001248:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800124c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001252:	2301      	movs	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	4619      	mov	r1, r3
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <MX_GPIO_Init+0xc0>)
 800125e:	f000 fb7f 	bl	8001960 <HAL_GPIO_Init>

}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	40010800 	.word	0x40010800
 8001274:	40010c00 	.word	0x40010c00

08001278 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001280:	f000 f88e 	bl	80013a0 <timerRun>
	getKeyInput();
 8001284:	f7fe ffbc 	bl	8000200 <getKeyInput>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	e7fe      	b.n	8001298 <Error_Handler+0x8>
	...

0800129c <setTimer>:
int timer5_flag = 0;
int timer5_counter = 0;

int TIMER_CYCLE = 10;
void setTimer(int time)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	timer_counter =  time / TIMER_CYCLE;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <setTimer+0x28>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80012ae:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <setTimer+0x2c>)
 80012b0:	6013      	str	r3, [r2, #0]
	timer_flag = 0;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <setTimer+0x30>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000048 	.word	0x20000048
 80012c8:	20000090 	.word	0x20000090
 80012cc:	2000008c 	.word	0x2000008c

080012d0 <setTimer1>:
void setTimer1(int time)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	timer1_counter = time / TIMER_CYCLE;
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <setTimer1+0x28>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	fb92 f3f3 	sdiv	r3, r2, r3
 80012e2:	4a06      	ldr	r2, [pc, #24]	; (80012fc <setTimer1+0x2c>)
 80012e4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <setTimer1+0x30>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000048 	.word	0x20000048
 80012fc:	20000098 	.word	0x20000098
 8001300:	20000094 	.word	0x20000094

08001304 <setTimer2>:
void setTimer2(int time)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	timer2_counter = time / TIMER_CYCLE;
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <setTimer2+0x28>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	fb92 f3f3 	sdiv	r3, r2, r3
 8001316:	4a06      	ldr	r2, [pc, #24]	; (8001330 <setTimer2+0x2c>)
 8001318:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <setTimer2+0x30>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000048 	.word	0x20000048
 8001330:	200000a0 	.word	0x200000a0
 8001334:	2000009c 	.word	0x2000009c

08001338 <setTimer3>:
void setTimer3(int time)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	timer3_counter = time / TIMER_CYCLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <setTimer3+0x28>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	fb92 f3f3 	sdiv	r3, r2, r3
 800134a:	4a06      	ldr	r2, [pc, #24]	; (8001364 <setTimer3+0x2c>)
 800134c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <setTimer3+0x30>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000048 	.word	0x20000048
 8001364:	200000a8 	.word	0x200000a8
 8001368:	200000a4 	.word	0x200000a4

0800136c <setTimer4>:
void setTimer4(int time)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	timer4_counter = time / TIMER_CYCLE;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <setTimer4+0x28>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	fb92 f3f3 	sdiv	r3, r2, r3
 800137e:	4a06      	ldr	r2, [pc, #24]	; (8001398 <setTimer4+0x2c>)
 8001380:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <setTimer4+0x30>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000048 	.word	0x20000048
 8001398:	200000b0 	.word	0x200000b0
 800139c:	200000ac 	.word	0x200000ac

080013a0 <timerRun>:
{
	timer5_counter = time / TIMER_CYCLE;
	timer5_flag = 0;
}
void timerRun()
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	if(timer_counter > 0)
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <timerRun+0xcc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	dd0b      	ble.n	80013c4 <timerRun+0x24>
	{
		timer_counter--;
 80013ac:	4b2f      	ldr	r3, [pc, #188]	; (800146c <timerRun+0xcc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	4a2e      	ldr	r2, [pc, #184]	; (800146c <timerRun+0xcc>)
 80013b4:	6013      	str	r3, [r2, #0]
		if(timer_counter <= 0)
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <timerRun+0xcc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	dc02      	bgt.n	80013c4 <timerRun+0x24>
		{
			timer_flag = 1;
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <timerRun+0xd0>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer1_counter > 0)
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <timerRun+0xd4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	dd0b      	ble.n	80013e4 <timerRun+0x44>
		{
			timer1_counter--;
 80013cc:	4b29      	ldr	r3, [pc, #164]	; (8001474 <timerRun+0xd4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	4a28      	ldr	r2, [pc, #160]	; (8001474 <timerRun+0xd4>)
 80013d4:	6013      	str	r3, [r2, #0]
			if(timer1_counter <= 0)
 80013d6:	4b27      	ldr	r3, [pc, #156]	; (8001474 <timerRun+0xd4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dc02      	bgt.n	80013e4 <timerRun+0x44>
			{
				timer1_flag = 1;
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <timerRun+0xd8>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer2_counter > 0)
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <timerRun+0xdc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	dd0b      	ble.n	8001404 <timerRun+0x64>
		{
			timer2_counter--;
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <timerRun+0xdc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	4a22      	ldr	r2, [pc, #136]	; (800147c <timerRun+0xdc>)
 80013f4:	6013      	str	r3, [r2, #0]
			if(timer2_counter <= 0)
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <timerRun+0xdc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc02      	bgt.n	8001404 <timerRun+0x64>
			{
				timer2_flag = 1;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <timerRun+0xe0>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer3_counter > 0)
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <timerRun+0xe4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	dd0b      	ble.n	8001424 <timerRun+0x84>
		{
			timer3_counter--;
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <timerRun+0xe4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3b01      	subs	r3, #1
 8001412:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <timerRun+0xe4>)
 8001414:	6013      	str	r3, [r2, #0]
			if(timer3_counter <= 0)
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <timerRun+0xe4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	dc02      	bgt.n	8001424 <timerRun+0x84>
			{
				timer3_flag = 1;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <timerRun+0xe8>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer4_counter > 0)
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <timerRun+0xec>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	dd0b      	ble.n	8001444 <timerRun+0xa4>
		{
			timer4_counter--;
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <timerRun+0xec>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3b01      	subs	r3, #1
 8001432:	4a16      	ldr	r2, [pc, #88]	; (800148c <timerRun+0xec>)
 8001434:	6013      	str	r3, [r2, #0]
			if(timer4_counter <= 0)
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <timerRun+0xec>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	dc02      	bgt.n	8001444 <timerRun+0xa4>
			{
				timer4_flag = 1;
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <timerRun+0xf0>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer5_counter > 0)
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <timerRun+0xf4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	dd0b      	ble.n	8001464 <timerRun+0xc4>
	{
		timer5_counter--;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <timerRun+0xf4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	3b01      	subs	r3, #1
 8001452:	4a10      	ldr	r2, [pc, #64]	; (8001494 <timerRun+0xf4>)
 8001454:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0)
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <timerRun+0xf4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	dc02      	bgt.n	8001464 <timerRun+0xc4>
		{
			timer5_counter = 1;
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <timerRun+0xf4>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	20000090 	.word	0x20000090
 8001470:	2000008c 	.word	0x2000008c
 8001474:	20000098 	.word	0x20000098
 8001478:	20000094 	.word	0x20000094
 800147c:	200000a0 	.word	0x200000a0
 8001480:	2000009c 	.word	0x2000009c
 8001484:	200000a8 	.word	0x200000a8
 8001488:	200000a4 	.word	0x200000a4
 800148c:	200000b0 	.word	0x200000b0
 8001490:	200000ac 	.word	0x200000ac
 8001494:	200000b4 	.word	0x200000b4

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_MspInit+0x5c>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <HAL_MspInit+0x5c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6193      	str	r3, [r2, #24]
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_MspInit+0x5c>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_MspInit+0x5c>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_MspInit+0x5c>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_MspInit+0x5c>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_MspInit+0x60>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_MspInit+0x60>)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010000 	.word	0x40010000

080014fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800150c:	d113      	bne.n	8001536 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_TIM_Base_MspInit+0x44>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <HAL_TIM_Base_MspInit+0x44>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	61d3      	str	r3, [r2, #28]
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_TIM_Base_MspInit+0x44>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	201c      	movs	r0, #28
 800152c:	f000 f9e1 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001530:	201c      	movs	r0, #28
 8001532:	f000 f9fa 	bl	800192a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <NMI_Handler+0x4>

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler+0x4>

08001562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158a:	f000 f8bf 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <TIM2_IRQHandler+0x10>)
 800159a:	f001 f81b 	bl	80025d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200000c4 	.word	0x200000c4

080015a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <led_red_and_green>:
 */

#include "traffic_light.h"

void led_red_and_green()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin | LED_6_Pin, SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2142      	movs	r1, #66	; 0x42
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <led_red_and_green+0x1c>)
 80015be:	f000 fb60 	bl	8001c82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_2_Pin | LED_3_Pin | LED_4_Pin | LED_5_Pin, RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	213c      	movs	r1, #60	; 0x3c
 80015c6:	4802      	ldr	r0, [pc, #8]	; (80015d0 <led_red_and_green+0x1c>)
 80015c8:	f000 fb5b 	bl	8001c82 <HAL_GPIO_WritePin>
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40010800 	.word	0x40010800

080015d4 <led_red_and_yellow>:

void led_red_and_yellow()
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin | LED_5_Pin, SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	2122      	movs	r1, #34	; 0x22
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <led_red_and_yellow+0x1c>)
 80015de:	f000 fb50 	bl	8001c82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_2_Pin | LED_3_Pin | LED_4_Pin | LED_6_Pin, RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	215c      	movs	r1, #92	; 0x5c
 80015e6:	4802      	ldr	r0, [pc, #8]	; (80015f0 <led_red_and_yellow+0x1c>)
 80015e8:	f000 fb4b 	bl	8001c82 <HAL_GPIO_WritePin>
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40010800 	.word	0x40010800

080015f4 <led_green_and_red>:

void led_green_and_red()
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_3_Pin | LED_4_Pin, SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	2118      	movs	r1, #24
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <led_green_and_red+0x1c>)
 80015fe:	f000 fb40 	bl	8001c82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin | LED_2_Pin | LED_5_Pin | LED_6_Pin, RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2166      	movs	r1, #102	; 0x66
 8001606:	4802      	ldr	r0, [pc, #8]	; (8001610 <led_green_and_red+0x1c>)
 8001608:	f000 fb3b 	bl	8001c82 <HAL_GPIO_WritePin>
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40010800 	.word	0x40010800

08001614 <led_yellow_and_red>:

void led_yellow_and_red()
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_2_Pin | LED_4_Pin, SET);
 8001618:	2201      	movs	r2, #1
 800161a:	2114      	movs	r1, #20
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <led_yellow_and_red+0x1c>)
 800161e:	f000 fb30 	bl	8001c82 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin | LED_3_Pin | LED_5_Pin | LED_6_Pin, RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	216a      	movs	r1, #106	; 0x6a
 8001626:	4802      	ldr	r0, [pc, #8]	; (8001630 <led_yellow_and_red+0x1c>)
 8001628:	f000 fb2b 	bl	8001c82 <HAL_GPIO_WritePin>
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40010800 	.word	0x40010800

08001634 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001634:	f7ff ffb8 	bl	80015a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001638:	480b      	ldr	r0, [pc, #44]	; (8001668 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800163a:	490c      	ldr	r1, [pc, #48]	; (800166c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800163c:	4a0c      	ldr	r2, [pc, #48]	; (8001670 <LoopFillZerobss+0x16>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a09      	ldr	r2, [pc, #36]	; (8001674 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001650:	4c09      	ldr	r4, [pc, #36]	; (8001678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800165e:	f001 faf9 	bl	8002c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001662:	f7ff fd03 	bl	800106c <main>
  bx lr
 8001666:	4770      	bx	lr
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001670:	08002cf0 	.word	0x08002cf0
  ldr r2, =_sbss
 8001674:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001678:	20000110 	.word	0x20000110

0800167c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC1_2_IRQHandler>
	...

08001680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_Init+0x28>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_Init+0x28>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 f923 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	200f      	movs	r0, #15
 8001698:	f000 f808 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff fefc 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40022000 	.word	0x40022000

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x54>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f93b 	bl	8001946 <HAL_SYSTICK_Config>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00e      	b.n	80016f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d80a      	bhi.n	80016f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f000 f903 	bl	80018f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_InitTick+0x5c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000004c 	.word	0x2000004c
 8001704:	20000054 	.word	0x20000054
 8001708:	20000050 	.word	0x20000050

0800170c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_IncTick+0x1c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_IncTick+0x20>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a03      	ldr	r2, [pc, #12]	; (800172c <HAL_IncTick+0x20>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	20000054 	.word	0x20000054
 800172c:	2000010c 	.word	0x2000010c

08001730 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b02      	ldr	r3, [pc, #8]	; (8001740 <HAL_GetTick+0x10>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	2000010c 	.word	0x2000010c

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4906      	ldr	r1, [pc, #24]	; (80017dc <__NVIC_EnableIRQ+0x34>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	; (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a8:	d301      	bcc.n	80018ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00f      	b.n	80018ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <SysTick_Config+0x40>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b6:	210f      	movs	r1, #15
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f7ff ff90 	bl	80017e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SysTick_Config+0x40>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SysTick_Config+0x40>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff2d 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001904:	f7ff ff42 	bl	800178c <__NVIC_GetPriorityGrouping>
 8001908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff ff90 	bl	8001834 <NVIC_EncodePriority>
 8001914:	4602      	mov	r2, r0
 8001916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff5f 	bl	80017e0 <__NVIC_SetPriority>
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff35 	bl	80017a8 <__NVIC_EnableIRQ>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffa2 	bl	8001898 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b08b      	sub	sp, #44	; 0x2c
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001972:	e148      	b.n	8001c06 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001974:	2201      	movs	r2, #1
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	429a      	cmp	r2, r3
 800198e:	f040 8137 	bne.w	8001c00 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4aa3      	ldr	r2, [pc, #652]	; (8001c24 <HAL_GPIO_Init+0x2c4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d05e      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 800199c:	4aa1      	ldr	r2, [pc, #644]	; (8001c24 <HAL_GPIO_Init+0x2c4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d875      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019a2:	4aa1      	ldr	r2, [pc, #644]	; (8001c28 <HAL_GPIO_Init+0x2c8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d058      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019a8:	4a9f      	ldr	r2, [pc, #636]	; (8001c28 <HAL_GPIO_Init+0x2c8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d86f      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019ae:	4a9f      	ldr	r2, [pc, #636]	; (8001c2c <HAL_GPIO_Init+0x2cc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d052      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019b4:	4a9d      	ldr	r2, [pc, #628]	; (8001c2c <HAL_GPIO_Init+0x2cc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d869      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019ba:	4a9d      	ldr	r2, [pc, #628]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d04c      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019c0:	4a9b      	ldr	r2, [pc, #620]	; (8001c30 <HAL_GPIO_Init+0x2d0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d863      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019c6:	4a9b      	ldr	r2, [pc, #620]	; (8001c34 <HAL_GPIO_Init+0x2d4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d046      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
 80019cc:	4a99      	ldr	r2, [pc, #612]	; (8001c34 <HAL_GPIO_Init+0x2d4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d85d      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019d2:	2b12      	cmp	r3, #18
 80019d4:	d82a      	bhi.n	8001a2c <HAL_GPIO_Init+0xcc>
 80019d6:	2b12      	cmp	r3, #18
 80019d8:	d859      	bhi.n	8001a8e <HAL_GPIO_Init+0x12e>
 80019da:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <HAL_GPIO_Init+0x80>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	08001a5b 	.word	0x08001a5b
 80019e4:	08001a35 	.word	0x08001a35
 80019e8:	08001a47 	.word	0x08001a47
 80019ec:	08001a89 	.word	0x08001a89
 80019f0:	08001a8f 	.word	0x08001a8f
 80019f4:	08001a8f 	.word	0x08001a8f
 80019f8:	08001a8f 	.word	0x08001a8f
 80019fc:	08001a8f 	.word	0x08001a8f
 8001a00:	08001a8f 	.word	0x08001a8f
 8001a04:	08001a8f 	.word	0x08001a8f
 8001a08:	08001a8f 	.word	0x08001a8f
 8001a0c:	08001a8f 	.word	0x08001a8f
 8001a10:	08001a8f 	.word	0x08001a8f
 8001a14:	08001a8f 	.word	0x08001a8f
 8001a18:	08001a8f 	.word	0x08001a8f
 8001a1c:	08001a8f 	.word	0x08001a8f
 8001a20:	08001a8f 	.word	0x08001a8f
 8001a24:	08001a3d 	.word	0x08001a3d
 8001a28:	08001a51 	.word	0x08001a51
 8001a2c:	4a82      	ldr	r2, [pc, #520]	; (8001c38 <HAL_GPIO_Init+0x2d8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d013      	beq.n	8001a5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a32:	e02c      	b.n	8001a8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	623b      	str	r3, [r7, #32]
          break;
 8001a3a:	e029      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	3304      	adds	r3, #4
 8001a42:	623b      	str	r3, [r7, #32]
          break;
 8001a44:	e024      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	3308      	adds	r3, #8
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e01f      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	330c      	adds	r3, #12
 8001a56:	623b      	str	r3, [r7, #32]
          break;
 8001a58:	e01a      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d102      	bne.n	8001a68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a62:	2304      	movs	r3, #4
 8001a64:	623b      	str	r3, [r7, #32]
          break;
 8001a66:	e013      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d105      	bne.n	8001a7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a70:	2308      	movs	r3, #8
 8001a72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	611a      	str	r2, [r3, #16]
          break;
 8001a7a:	e009      	b.n	8001a90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	615a      	str	r2, [r3, #20]
          break;
 8001a86:	e003      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
          break;
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x130>
          break;
 8001a8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2bff      	cmp	r3, #255	; 0xff
 8001a94:	d801      	bhi.n	8001a9a <HAL_GPIO_Init+0x13a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	e001      	b.n	8001a9e <HAL_GPIO_Init+0x13e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2bff      	cmp	r3, #255	; 0xff
 8001aa4:	d802      	bhi.n	8001aac <HAL_GPIO_Init+0x14c>
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	e002      	b.n	8001ab2 <HAL_GPIO_Init+0x152>
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	3b08      	subs	r3, #8
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	210f      	movs	r1, #15
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	6a39      	ldr	r1, [r7, #32]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	431a      	orrs	r2, r3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8090 	beq.w	8001c00 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae0:	4b56      	ldr	r3, [pc, #344]	; (8001c3c <HAL_GPIO_Init+0x2dc>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a55      	ldr	r2, [pc, #340]	; (8001c3c <HAL_GPIO_Init+0x2dc>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_GPIO_Init+0x2dc>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001af8:	4a51      	ldr	r2, [pc, #324]	; (8001c40 <HAL_GPIO_Init+0x2e0>)
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	220f      	movs	r2, #15
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a49      	ldr	r2, [pc, #292]	; (8001c44 <HAL_GPIO_Init+0x2e4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d00d      	beq.n	8001b40 <HAL_GPIO_Init+0x1e0>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a48      	ldr	r2, [pc, #288]	; (8001c48 <HAL_GPIO_Init+0x2e8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d007      	beq.n	8001b3c <HAL_GPIO_Init+0x1dc>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <HAL_GPIO_Init+0x2ec>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d101      	bne.n	8001b38 <HAL_GPIO_Init+0x1d8>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e004      	b.n	8001b42 <HAL_GPIO_Init+0x1e2>
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e002      	b.n	8001b42 <HAL_GPIO_Init+0x1e2>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <HAL_GPIO_Init+0x1e2>
 8001b40:	2300      	movs	r3, #0
 8001b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b44:	f002 0203 	and.w	r2, r2, #3
 8001b48:	0092      	lsls	r2, r2, #2
 8001b4a:	4093      	lsls	r3, r2
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b52:	493b      	ldr	r1, [pc, #236]	; (8001c40 <HAL_GPIO_Init+0x2e0>)
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d006      	beq.n	8001b7a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b6c:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	4937      	ldr	r1, [pc, #220]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]
 8001b78:	e006      	b.n	8001b88 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b7a:	4b35      	ldr	r3, [pc, #212]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	4933      	ldr	r1, [pc, #204]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d006      	beq.n	8001ba2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	492d      	ldr	r1, [pc, #180]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60cb      	str	r3, [r1, #12]
 8001ba0:	e006      	b.n	8001bb0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	4929      	ldr	r1, [pc, #164]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d006      	beq.n	8001bca <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bbc:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	4923      	ldr	r1, [pc, #140]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	491f      	ldr	r1, [pc, #124]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001be4:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4919      	ldr	r1, [pc, #100]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4915      	ldr	r1, [pc, #84]	; (8001c50 <HAL_GPIO_Init+0x2f0>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	3301      	adds	r3, #1
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f47f aeaf 	bne.w	8001974 <HAL_GPIO_Init+0x14>
  }
}
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
 8001c1a:	372c      	adds	r7, #44	; 0x2c
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	10320000 	.word	0x10320000
 8001c28:	10310000 	.word	0x10310000
 8001c2c:	10220000 	.word	0x10220000
 8001c30:	10210000 	.word	0x10210000
 8001c34:	10120000 	.word	0x10120000
 8001c38:	10110000 	.word	0x10110000
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000
 8001c44:	40010800 	.word	0x40010800
 8001c48:	40010c00 	.word	0x40010c00
 8001c4c:	40011000 	.word	0x40011000
 8001c50:	40010400 	.word	0x40010400

08001c54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	887b      	ldrh	r3, [r7, #2]
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	e001      	b.n	8001c76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	807b      	strh	r3, [r7, #2]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c92:	787b      	ldrb	r3, [r7, #1]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c98:	887a      	ldrh	r2, [r7, #2]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c9e:	e003      	b.n	8001ca8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ca0:	887b      	ldrh	r3, [r7, #2]
 8001ca2:	041a      	lsls	r2, r3, #16
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	611a      	str	r2, [r3, #16]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cc4:	887a      	ldrh	r2, [r7, #2]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	041a      	lsls	r2, r3, #16
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	400b      	ands	r3, r1
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	611a      	str	r2, [r3, #16]
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e26c      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8087 	beq.w	8001e12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d04:	4b92      	ldr	r3, [pc, #584]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 030c 	and.w	r3, r3, #12
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d00c      	beq.n	8001d2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d10:	4b8f      	ldr	r3, [pc, #572]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d112      	bne.n	8001d42 <HAL_RCC_OscConfig+0x5e>
 8001d1c:	4b8c      	ldr	r3, [pc, #560]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d28:	d10b      	bne.n	8001d42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2a:	4b89      	ldr	r3, [pc, #548]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d06c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x12c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d168      	bne.n	8001e10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e246      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x76>
 8001d4c:	4b80      	ldr	r3, [pc, #512]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a7f      	ldr	r2, [pc, #508]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	e02e      	b.n	8001db8 <HAL_RCC_OscConfig+0xd4>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x98>
 8001d62:	4b7b      	ldr	r3, [pc, #492]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7a      	ldr	r2, [pc, #488]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b78      	ldr	r3, [pc, #480]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a77      	ldr	r2, [pc, #476]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e01d      	b.n	8001db8 <HAL_RCC_OscConfig+0xd4>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0xbc>
 8001d86:	4b72      	ldr	r3, [pc, #456]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a71      	ldr	r2, [pc, #452]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b6f      	ldr	r3, [pc, #444]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a6e      	ldr	r2, [pc, #440]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0xd4>
 8001da0:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a6a      	ldr	r2, [pc, #424]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b68      	ldr	r3, [pc, #416]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a67      	ldr	r2, [pc, #412]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d013      	beq.n	8001de8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fcb6 	bl	8001730 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff fcb2 	bl	8001730 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1fa      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xe4>
 8001de6:	e014      	b.n	8001e12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff fca2 	bl	8001730 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff fc9e 	bl	8001730 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e1e6      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x10c>
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d063      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1e:	4b4c      	ldr	r3, [pc, #304]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e2a:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d11c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x18c>
 8001e36:	4b46      	ldr	r3, [pc, #280]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_RCC_OscConfig+0x176>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e1ba      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4939      	ldr	r1, [pc, #228]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	e03a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d020      	beq.n	8001eba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e78:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fc57 	bl	8001730 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff fc53 	bl	8001730 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e19b      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4927      	ldr	r1, [pc, #156]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fc36 	bl	8001730 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fc32 	bl	8001730 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e17a      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d03a      	beq.n	8001f68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d019      	beq.n	8001f2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f00:	f7ff fc16 	bl	8001730 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff fc12 	bl	8001730 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e15a      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f26:	2001      	movs	r0, #1
 8001f28:	f000 fa9a 	bl	8002460 <RCC_Delay>
 8001f2c:	e01c      	b.n	8001f68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7ff fbfc 	bl	8001730 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3a:	e00f      	b.n	8001f5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7ff fbf8 	bl	8001730 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d908      	bls.n	8001f5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e140      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000
 8001f54:	42420000 	.word	0x42420000
 8001f58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5c:	4b9e      	ldr	r3, [pc, #632]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1e9      	bne.n	8001f3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80a6 	beq.w	80020c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7a:	4b97      	ldr	r3, [pc, #604]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10d      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	4b94      	ldr	r3, [pc, #592]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a93      	ldr	r2, [pc, #588]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f90:	61d3      	str	r3, [r2, #28]
 8001f92:	4b91      	ldr	r3, [pc, #580]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_OscConfig+0x4f8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d118      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fae:	4b8b      	ldr	r3, [pc, #556]	; (80021dc <HAL_RCC_OscConfig+0x4f8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a8a      	ldr	r2, [pc, #552]	; (80021dc <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fba:	f7ff fbb9 	bl	8001730 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc2:	f7ff fbb5 	bl	8001730 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b64      	cmp	r3, #100	; 0x64
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e0fd      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	4b81      	ldr	r3, [pc, #516]	; (80021dc <HAL_RCC_OscConfig+0x4f8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d106      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x312>
 8001fe8:	4b7b      	ldr	r3, [pc, #492]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4a7a      	ldr	r2, [pc, #488]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6213      	str	r3, [r2, #32]
 8001ff4:	e02d      	b.n	8002052 <HAL_RCC_OscConfig+0x36e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0x334>
 8001ffe:	4b76      	ldr	r3, [pc, #472]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4a75      	ldr	r2, [pc, #468]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6213      	str	r3, [r2, #32]
 800200a:	4b73      	ldr	r3, [pc, #460]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4a72      	ldr	r2, [pc, #456]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	6213      	str	r3, [r2, #32]
 8002016:	e01c      	b.n	8002052 <HAL_RCC_OscConfig+0x36e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b05      	cmp	r3, #5
 800201e:	d10c      	bne.n	800203a <HAL_RCC_OscConfig+0x356>
 8002020:	4b6d      	ldr	r3, [pc, #436]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4a6c      	ldr	r2, [pc, #432]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6213      	str	r3, [r2, #32]
 800202c:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4a69      	ldr	r2, [pc, #420]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6213      	str	r3, [r2, #32]
 8002038:	e00b      	b.n	8002052 <HAL_RCC_OscConfig+0x36e>
 800203a:	4b67      	ldr	r3, [pc, #412]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a66      	ldr	r2, [pc, #408]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6213      	str	r3, [r2, #32]
 8002046:	4b64      	ldr	r3, [pc, #400]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a63      	ldr	r2, [pc, #396]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d015      	beq.n	8002086 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7ff fb69 	bl	8001730 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7ff fb65 	bl	8001730 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0ab      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002078:	4b57      	ldr	r3, [pc, #348]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0ee      	beq.n	8002062 <HAL_RCC_OscConfig+0x37e>
 8002084:	e014      	b.n	80020b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002086:	f7ff fb53 	bl	8001730 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7ff fb4f 	bl	8001730 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	; 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e095      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a4:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ee      	bne.n	800208e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d105      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b6:	4b48      	ldr	r3, [pc, #288]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a47      	ldr	r2, [pc, #284]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8081 	beq.w	80021ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020cc:	4b42      	ldr	r3, [pc, #264]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d061      	beq.n	800219c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d146      	bne.n	800216e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e0:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <HAL_RCC_OscConfig+0x4fc>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7ff fb23 	bl	8001730 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff fb1f 	bl	8001730 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e067      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002100:	4b35      	ldr	r3, [pc, #212]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002114:	d108      	bne.n	8002128 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002116:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	492d      	ldr	r1, [pc, #180]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002128:	4b2b      	ldr	r3, [pc, #172]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a19      	ldr	r1, [r3, #32]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	430b      	orrs	r3, r1
 800213a:	4927      	ldr	r1, [pc, #156]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <HAL_RCC_OscConfig+0x4fc>)
 8002142:	2201      	movs	r2, #1
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff faf3 	bl	8001730 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214e:	f7ff faef 	bl	8001730 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e037      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x46a>
 800216c:	e02f      	b.n	80021ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_RCC_OscConfig+0x4fc>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff fadc 	bl	8001730 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217c:	f7ff fad8 	bl	8001730 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e020      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x498>
 800219a:	e018      	b.n	80021ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e013      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_OscConfig+0x4f4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d001      	beq.n	80021ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40007000 	.word	0x40007000
 80021e0:	42420060 	.word	0x42420060

080021e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0d0      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b6a      	ldr	r3, [pc, #424]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d910      	bls.n	8002228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b67      	ldr	r3, [pc, #412]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 0207 	bic.w	r2, r3, #7
 800220e:	4965      	ldr	r1, [pc, #404]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800224a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002262:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d040      	beq.n	8002304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e073      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06b      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4936      	ldr	r1, [pc, #216]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7ff fa2c 	bl	8001730 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7ff fa28 	bl	8001730 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e053      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d210      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 0207 	bic.w	r2, r3, #7
 800231a:	4922      	ldr	r1, [pc, #136]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f821 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002376:	4602      	mov	r2, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	490a      	ldr	r1, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	5ccb      	ldrb	r3, [r1, r3]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1cc>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff f98a 	bl	80016ac <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40022000 	.word	0x40022000
 80023a8:	40021000 	.word	0x40021000
 80023ac:	08002cc4 	.word	0x08002cc4
 80023b0:	2000004c 	.word	0x2000004c
 80023b4:	20000050 	.word	0x20000050

080023b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <HAL_RCC_GetSysClockFreq+0x94>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d002      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x30>
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0x36>
 80023e6:	e027      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ea:	613b      	str	r3, [r7, #16]
      break;
 80023ec:	e027      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	0c9b      	lsrs	r3, r3, #18
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	4a17      	ldr	r2, [pc, #92]	; (8002454 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023f8:	5cd3      	ldrb	r3, [r2, r3]
 80023fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d010      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_RCC_GetSysClockFreq+0x94>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	0c5b      	lsrs	r3, r3, #17
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	4a11      	ldr	r2, [pc, #68]	; (8002458 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <HAL_RCC_GetSysClockFreq+0x98>)
 800241a:	fb02 f203 	mul.w	r2, r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e004      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a0c      	ldr	r2, [pc, #48]	; (800245c <HAL_RCC_GetSysClockFreq+0xa4>)
 800242c:	fb02 f303 	mul.w	r3, r2, r3
 8002430:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	613b      	str	r3, [r7, #16]
      break;
 8002436:	e002      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_GetSysClockFreq+0x98>)
 800243a:	613b      	str	r3, [r7, #16]
      break;
 800243c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243e:	693b      	ldr	r3, [r7, #16]
}
 8002440:	4618      	mov	r0, r3
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	007a1200 	.word	0x007a1200
 8002454:	08002cd4 	.word	0x08002cd4
 8002458:	08002ce4 	.word	0x08002ce4
 800245c:	003d0900 	.word	0x003d0900

08002460 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <RCC_Delay+0x34>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <RCC_Delay+0x38>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	0a5b      	lsrs	r3, r3, #9
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800247c:	bf00      	nop
  }
  while (Delay --);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1e5a      	subs	r2, r3, #1
 8002482:	60fa      	str	r2, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f9      	bne.n	800247c <RCC_Delay+0x1c>
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	2000004c 	.word	0x2000004c
 8002498:	10624dd3 	.word	0x10624dd3

0800249c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e041      	b.n	8002532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff f81a 	bl	80014fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3304      	adds	r3, #4
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f000 fa56 	bl	800298c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d001      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e035      	b.n	80025c0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a16      	ldr	r2, [pc, #88]	; (80025cc <HAL_TIM_Base_Start_IT+0x90>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d009      	beq.n	800258a <HAL_TIM_Base_Start_IT+0x4e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257e:	d004      	beq.n	800258a <HAL_TIM_Base_Start_IT+0x4e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <HAL_TIM_Base_Start_IT+0x94>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d111      	bne.n	80025ae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b06      	cmp	r3, #6
 800259a:	d010      	beq.n	80025be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ac:	e007      	b.n	80025be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40012c00 	.word	0x40012c00
 80025d0:	40000400 	.word	0x40000400

080025d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d020      	beq.n	8002638 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01b      	beq.n	8002638 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0202 	mvn.w	r2, #2
 8002608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f998 	bl	8002954 <HAL_TIM_IC_CaptureCallback>
 8002624:	e005      	b.n	8002632 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f98b 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f99a 	bl	8002966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d020      	beq.n	8002684 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01b      	beq.n	8002684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0204 	mvn.w	r2, #4
 8002654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2202      	movs	r2, #2
 800265a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f972 	bl	8002954 <HAL_TIM_IC_CaptureCallback>
 8002670:	e005      	b.n	800267e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f965 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f974 	bl	8002966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d020      	beq.n	80026d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01b      	beq.n	80026d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0208 	mvn.w	r2, #8
 80026a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2204      	movs	r2, #4
 80026a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f94c 	bl	8002954 <HAL_TIM_IC_CaptureCallback>
 80026bc:	e005      	b.n	80026ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f93f 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f94e 	bl	8002966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d020      	beq.n	800271c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01b      	beq.n	800271c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0210 	mvn.w	r2, #16
 80026ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2208      	movs	r2, #8
 80026f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f926 	bl	8002954 <HAL_TIM_IC_CaptureCallback>
 8002708:	e005      	b.n	8002716 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f919 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f928 	bl	8002966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0201 	mvn.w	r2, #1
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe fd9c 	bl	8001278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00c      	beq.n	8002764 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fa6f 	bl	8002c42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8f8 	bl	8002978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00c      	beq.n	80027ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0220 	mvn.w	r2, #32
 80027a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa42 	bl	8002c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_TIM_ConfigClockSource+0x1c>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0b4      	b.n	800293a <HAL_TIM_ConfigClockSource+0x186>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002808:	d03e      	beq.n	8002888 <HAL_TIM_ConfigClockSource+0xd4>
 800280a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800280e:	f200 8087 	bhi.w	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002816:	f000 8086 	beq.w	8002926 <HAL_TIM_ConfigClockSource+0x172>
 800281a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281e:	d87f      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002820:	2b70      	cmp	r3, #112	; 0x70
 8002822:	d01a      	beq.n	800285a <HAL_TIM_ConfigClockSource+0xa6>
 8002824:	2b70      	cmp	r3, #112	; 0x70
 8002826:	d87b      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002828:	2b60      	cmp	r3, #96	; 0x60
 800282a:	d050      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0x11a>
 800282c:	2b60      	cmp	r3, #96	; 0x60
 800282e:	d877      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b50      	cmp	r3, #80	; 0x50
 8002832:	d03c      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0xfa>
 8002834:	2b50      	cmp	r3, #80	; 0x50
 8002836:	d873      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	d058      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x13a>
 800283c:	2b40      	cmp	r3, #64	; 0x40
 800283e:	d86f      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b30      	cmp	r3, #48	; 0x30
 8002842:	d064      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x15a>
 8002844:	2b30      	cmp	r3, #48	; 0x30
 8002846:	d86b      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b20      	cmp	r3, #32
 800284a:	d060      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x15a>
 800284c:	2b20      	cmp	r3, #32
 800284e:	d867      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d05c      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x15a>
 8002854:	2b10      	cmp	r3, #16
 8002856:	d05a      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x15a>
 8002858:	e062      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6899      	ldr	r1, [r3, #8]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f000 f96a 	bl	8002b42 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800287c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	609a      	str	r2, [r3, #8]
      break;
 8002886:	e04f      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	6899      	ldr	r1, [r3, #8]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f000 f953 	bl	8002b42 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028aa:	609a      	str	r2, [r3, #8]
      break;
 80028ac:	e03c      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6859      	ldr	r1, [r3, #4]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	461a      	mov	r2, r3
 80028bc:	f000 f8ca 	bl	8002a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2150      	movs	r1, #80	; 0x50
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 f921 	bl	8002b0e <TIM_ITRx_SetConfig>
      break;
 80028cc:	e02c      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	461a      	mov	r2, r3
 80028dc:	f000 f8e8 	bl	8002ab0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2160      	movs	r1, #96	; 0x60
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f911 	bl	8002b0e <TIM_ITRx_SetConfig>
      break;
 80028ec:	e01c      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f000 f8aa 	bl	8002a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2140      	movs	r1, #64	; 0x40
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f901 	bl	8002b0e <TIM_ITRx_SetConfig>
      break;
 800290c:	e00c      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4619      	mov	r1, r3
 8002918:	4610      	mov	r0, r2
 800291a:	f000 f8f8 	bl	8002b0e <TIM_ITRx_SetConfig>
      break;
 800291e:	e003      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
      break;
 8002924:	e000      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002926:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
	...

0800298c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a2b      	ldr	r2, [pc, #172]	; (8002a4c <TIM_Base_SetConfig+0xc0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d007      	beq.n	80029b4 <TIM_Base_SetConfig+0x28>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029aa:	d003      	beq.n	80029b4 <TIM_Base_SetConfig+0x28>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a28      	ldr	r2, [pc, #160]	; (8002a50 <TIM_Base_SetConfig+0xc4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d108      	bne.n	80029c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a20      	ldr	r2, [pc, #128]	; (8002a4c <TIM_Base_SetConfig+0xc0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <TIM_Base_SetConfig+0x52>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d4:	d003      	beq.n	80029de <TIM_Base_SetConfig+0x52>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <TIM_Base_SetConfig+0xc4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d108      	bne.n	80029f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a0d      	ldr	r2, [pc, #52]	; (8002a4c <TIM_Base_SetConfig+0xc0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d103      	bne.n	8002a24 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f023 0201 	bic.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	611a      	str	r2, [r3, #16]
  }
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40000400 	.word	0x40000400

08002a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f023 0201 	bic.w	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f023 030a 	bic.w	r3, r3, #10
 8002a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	621a      	str	r2, [r3, #32]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f023 0210 	bic.w	r2, r3, #16
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	031b      	lsls	r3, r3, #12
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002aec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	621a      	str	r2, [r3, #32]
}
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f043 0307 	orr.w	r3, r3, #7
 8002b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	609a      	str	r2, [r3, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b087      	sub	sp, #28
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	021a      	lsls	r2, r3, #8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	609a      	str	r2, [r3, #8]
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e041      	b.n	8002c1c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d009      	beq.n	8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be4:	d004      	beq.n	8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a10      	ldr	r2, [pc, #64]	; (8002c2c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d10c      	bne.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40012c00 	.word	0x40012c00
 8002c2c:	40000400 	.word	0x40000400

08002c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <__libc_init_array>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	2600      	movs	r6, #0
 8002c58:	4d0c      	ldr	r5, [pc, #48]	; (8002c8c <__libc_init_array+0x38>)
 8002c5a:	4c0d      	ldr	r4, [pc, #52]	; (8002c90 <__libc_init_array+0x3c>)
 8002c5c:	1b64      	subs	r4, r4, r5
 8002c5e:	10a4      	asrs	r4, r4, #2
 8002c60:	42a6      	cmp	r6, r4
 8002c62:	d109      	bne.n	8002c78 <__libc_init_array+0x24>
 8002c64:	f000 f822 	bl	8002cac <_init>
 8002c68:	2600      	movs	r6, #0
 8002c6a:	4d0a      	ldr	r5, [pc, #40]	; (8002c94 <__libc_init_array+0x40>)
 8002c6c:	4c0a      	ldr	r4, [pc, #40]	; (8002c98 <__libc_init_array+0x44>)
 8002c6e:	1b64      	subs	r4, r4, r5
 8002c70:	10a4      	asrs	r4, r4, #2
 8002c72:	42a6      	cmp	r6, r4
 8002c74:	d105      	bne.n	8002c82 <__libc_init_array+0x2e>
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
 8002c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7c:	4798      	blx	r3
 8002c7e:	3601      	adds	r6, #1
 8002c80:	e7ee      	b.n	8002c60 <__libc_init_array+0xc>
 8002c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c86:	4798      	blx	r3
 8002c88:	3601      	adds	r6, #1
 8002c8a:	e7f2      	b.n	8002c72 <__libc_init_array+0x1e>
 8002c8c:	08002ce8 	.word	0x08002ce8
 8002c90:	08002ce8 	.word	0x08002ce8
 8002c94:	08002ce8 	.word	0x08002ce8
 8002c98:	08002cec 	.word	0x08002cec

08002c9c <memset>:
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4402      	add	r2, r0
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d100      	bne.n	8002ca6 <memset+0xa>
 8002ca4:	4770      	bx	lr
 8002ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8002caa:	e7f9      	b.n	8002ca0 <memset+0x4>

08002cac <_init>:
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cae:	bf00      	nop
 8002cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb2:	bc08      	pop	{r3}
 8002cb4:	469e      	mov	lr, r3
 8002cb6:	4770      	bx	lr

08002cb8 <_fini>:
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	bf00      	nop
 8002cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cbe:	bc08      	pop	{r3}
 8002cc0:	469e      	mov	lr, r3
 8002cc2:	4770      	bx	lr
